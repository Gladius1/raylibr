// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/raylibr_types.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bounding_box_
BoundingBox bounding_box_(Vector3 min, Vector3 max);
RcppExport SEXP _raylibr_bounding_box_(SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector3 >::type min(minSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(bounding_box_(min, max));
    return rcpp_result_gen;
END_RCPP
}
// bounding_box_get_min_
Vector3 bounding_box_get_min_(BoundingBox obj);
RcppExport SEXP _raylibr_bounding_box_get_min_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< BoundingBox >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(bounding_box_get_min_(obj));
    return rcpp_result_gen;
END_RCPP
}
// bounding_box_set_min_
BoundingBox bounding_box_set_min_(BoundingBox obj, Vector3 min);
RcppExport SEXP _raylibr_bounding_box_set_min_(SEXP objSEXP, SEXP minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< BoundingBox >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type min(minSEXP);
    rcpp_result_gen = Rcpp::wrap(bounding_box_set_min_(obj, min));
    return rcpp_result_gen;
END_RCPP
}
// bounding_box_get_max_
Vector3 bounding_box_get_max_(BoundingBox obj);
RcppExport SEXP _raylibr_bounding_box_get_max_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< BoundingBox >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(bounding_box_get_max_(obj));
    return rcpp_result_gen;
END_RCPP
}
// bounding_box_set_max_
BoundingBox bounding_box_set_max_(BoundingBox obj, Vector3 max);
RcppExport SEXP _raylibr_bounding_box_set_max_(SEXP objSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< BoundingBox >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(bounding_box_set_max_(obj, max));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_
Camera2D camera_2d_(Vector2 offset, Vector2 target, float rotation, float zoom);
RcppExport SEXP _raylibr_camera_2d_(SEXP offsetSEXP, SEXP targetSEXP, SEXP rotationSEXP, SEXP zoomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type target(targetSEXP);
    Rcpp::traits::input_parameter< float >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< float >::type zoom(zoomSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_(offset, target, rotation, zoom));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_get_offset_
Vector2 camera_2d_get_offset_(Camera2D obj);
RcppExport SEXP _raylibr_camera_2d_get_offset_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_get_offset_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_set_offset_
Camera2D camera_2d_set_offset_(Camera2D obj, Vector2 offset);
RcppExport SEXP _raylibr_camera_2d_set_offset_(SEXP objSEXP, SEXP offsetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type offset(offsetSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_set_offset_(obj, offset));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_get_target_
Vector2 camera_2d_get_target_(Camera2D obj);
RcppExport SEXP _raylibr_camera_2d_get_target_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_get_target_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_set_target_
Camera2D camera_2d_set_target_(Camera2D obj, Vector2 target);
RcppExport SEXP _raylibr_camera_2d_set_target_(SEXP objSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_set_target_(obj, target));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_get_rotation_
float camera_2d_get_rotation_(Camera2D obj);
RcppExport SEXP _raylibr_camera_2d_get_rotation_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_get_rotation_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_set_rotation_
Camera2D camera_2d_set_rotation_(Camera2D obj, float rotation);
RcppExport SEXP _raylibr_camera_2d_set_rotation_(SEXP objSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_set_rotation_(obj, rotation));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_get_zoom_
float camera_2d_get_zoom_(Camera2D obj);
RcppExport SEXP _raylibr_camera_2d_get_zoom_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_get_zoom_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_2d_set_zoom_
Camera2D camera_2d_set_zoom_(Camera2D obj, float zoom);
RcppExport SEXP _raylibr_camera_2d_set_zoom_(SEXP objSEXP, SEXP zoomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type zoom(zoomSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_2d_set_zoom_(obj, zoom));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_
Camera3D camera_3d_(Vector3 position, Vector3 target, Vector3 up, float fovy, int projection);
RcppExport SEXP _raylibr_camera_3d_(SEXP positionSEXP, SEXP targetSEXP, SEXP upSEXP, SEXP fovySEXP, SEXP projectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector3 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type target(targetSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type up(upSEXP);
    Rcpp::traits::input_parameter< float >::type fovy(fovySEXP);
    Rcpp::traits::input_parameter< int >::type projection(projectionSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_(position, target, up, fovy, projection));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_get_position_
Vector3 camera_3d_get_position_(Camera3D obj);
RcppExport SEXP _raylibr_camera_3d_get_position_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_get_position_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_set_position_
Camera3D camera_3d_set_position_(Camera3D obj, Vector3 position);
RcppExport SEXP _raylibr_camera_3d_set_position_(SEXP objSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type position(positionSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_set_position_(obj, position));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_get_target_
Vector3 camera_3d_get_target_(Camera3D obj);
RcppExport SEXP _raylibr_camera_3d_get_target_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_get_target_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_set_target_
Camera3D camera_3d_set_target_(Camera3D obj, Vector3 target);
RcppExport SEXP _raylibr_camera_3d_set_target_(SEXP objSEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_set_target_(obj, target));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_get_up_
Vector3 camera_3d_get_up_(Camera3D obj);
RcppExport SEXP _raylibr_camera_3d_get_up_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_get_up_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_set_up_
Camera3D camera_3d_set_up_(Camera3D obj, Vector3 up);
RcppExport SEXP _raylibr_camera_3d_set_up_(SEXP objSEXP, SEXP upSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type up(upSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_set_up_(obj, up));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_get_fovy_
float camera_3d_get_fovy_(Camera3D obj);
RcppExport SEXP _raylibr_camera_3d_get_fovy_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_get_fovy_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_set_fovy_
Camera3D camera_3d_set_fovy_(Camera3D obj, float fovy);
RcppExport SEXP _raylibr_camera_3d_set_fovy_(SEXP objSEXP, SEXP fovySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type fovy(fovySEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_set_fovy_(obj, fovy));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_get_projection_
int camera_3d_get_projection_(Camera3D obj);
RcppExport SEXP _raylibr_camera_3d_get_projection_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_get_projection_(obj));
    return rcpp_result_gen;
END_RCPP
}
// camera_3d_set_projection_
Camera3D camera_3d_set_projection_(Camera3D obj, int projection);
RcppExport SEXP _raylibr_camera_3d_set_projection_(SEXP objSEXP, SEXP projectionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type projection(projectionSEXP);
    rcpp_result_gen = Rcpp::wrap(camera_3d_set_projection_(obj, projection));
    return rcpp_result_gen;
END_RCPP
}
// as_color
Color as_color(Color x);
RcppExport SEXP _raylibr_as_color(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(as_color(x));
    return rcpp_result_gen;
END_RCPP
}
// draw_circles
void draw_circles(NumericVector x, NumericVector y, NumericVector radius, List colors);
RcppExport SEXP _raylibr_draw_circles(SEXP xSEXP, SEXP ySEXP, SEXP radiusSEXP, SEXP colorsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< NumericVector >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< List >::type colors(colorsSEXP);
    draw_circles(x, y, radius, colors);
    return R_NilValue;
END_RCPP
}
// load_font_ex
Font load_font_ex(const char * file_name, int font_size);
RcppExport SEXP _raylibr_load_font_ex(SEXP file_nameSEXP, SEXP font_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< int >::type font_size(font_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(load_font_ex(file_name, font_size));
    return rcpp_result_gen;
END_RCPP
}
// image_draw_pixel
void image_draw_pixel(Image& dst, int posX, int posY, Color color);
RcppExport SEXP _raylibr_image_draw_pixel(SEXP dstSEXP, SEXP posXSEXP, SEXP posYSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image& >::type dst(dstSEXP);
    Rcpp::traits::input_parameter< int >::type posX(posXSEXP);
    Rcpp::traits::input_parameter< int >::type posY(posYSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    image_draw_pixel(dst, posX, posY, color);
    return R_NilValue;
END_RCPP
}
// color_
Color color_(unsigned int r, unsigned int g, unsigned int b, unsigned int a);
RcppExport SEXP _raylibr_color_(SEXP rSEXP, SEXP gSEXP, SEXP bSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type g(gSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type b(bSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(color_(r, g, b, a));
    return rcpp_result_gen;
END_RCPP
}
// color_get_r_
unsigned int color_get_r_(Color obj);
RcppExport SEXP _raylibr_color_get_r_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(color_get_r_(obj));
    return rcpp_result_gen;
END_RCPP
}
// color_set_r_
Color color_set_r_(Color obj, unsigned int r);
RcppExport SEXP _raylibr_color_set_r_(SEXP objSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(color_set_r_(obj, r));
    return rcpp_result_gen;
END_RCPP
}
// color_get_g_
unsigned int color_get_g_(Color obj);
RcppExport SEXP _raylibr_color_get_g_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(color_get_g_(obj));
    return rcpp_result_gen;
END_RCPP
}
// color_set_g_
Color color_set_g_(Color obj, unsigned int g);
RcppExport SEXP _raylibr_color_set_g_(SEXP objSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(color_set_g_(obj, g));
    return rcpp_result_gen;
END_RCPP
}
// color_get_b_
unsigned int color_get_b_(Color obj);
RcppExport SEXP _raylibr_color_get_b_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(color_get_b_(obj));
    return rcpp_result_gen;
END_RCPP
}
// color_set_b_
Color color_set_b_(Color obj, unsigned int b);
RcppExport SEXP _raylibr_color_set_b_(SEXP objSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(color_set_b_(obj, b));
    return rcpp_result_gen;
END_RCPP
}
// color_get_a_
unsigned int color_get_a_(Color obj);
RcppExport SEXP _raylibr_color_get_a_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(color_get_a_(obj));
    return rcpp_result_gen;
END_RCPP
}
// color_set_a_
Color color_set_a_(Color obj, unsigned int a);
RcppExport SEXP _raylibr_color_set_a_(SEXP objSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(color_set_a_(obj, a));
    return rcpp_result_gen;
END_RCPP
}
// init_window_
void init_window_(int width, int height, const char * title);
RcppExport SEXP _raylibr_init_window_(SEXP widthSEXP, SEXP heightSEXP, SEXP titleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< const char * >::type title(titleSEXP);
    init_window_(width, height, title);
    return R_NilValue;
END_RCPP
}
// window_should_close_
bool window_should_close_();
RcppExport SEXP _raylibr_window_should_close_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(window_should_close_());
    return rcpp_result_gen;
END_RCPP
}
// close_window_
void close_window_();
RcppExport SEXP _raylibr_close_window_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    close_window_();
    return R_NilValue;
END_RCPP
}
// is_window_ready_
bool is_window_ready_();
RcppExport SEXP _raylibr_is_window_ready_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_ready_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_fullscreen_
bool is_window_fullscreen_();
RcppExport SEXP _raylibr_is_window_fullscreen_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_fullscreen_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_hidden_
bool is_window_hidden_();
RcppExport SEXP _raylibr_is_window_hidden_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_hidden_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_minimized_
bool is_window_minimized_();
RcppExport SEXP _raylibr_is_window_minimized_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_minimized_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_maximized_
bool is_window_maximized_();
RcppExport SEXP _raylibr_is_window_maximized_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_maximized_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_focused_
bool is_window_focused_();
RcppExport SEXP _raylibr_is_window_focused_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_focused_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_resized_
bool is_window_resized_();
RcppExport SEXP _raylibr_is_window_resized_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_window_resized_());
    return rcpp_result_gen;
END_RCPP
}
// is_window_state_
bool is_window_state_(unsigned int flag);
RcppExport SEXP _raylibr_is_window_state_(SEXP flagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type flag(flagSEXP);
    rcpp_result_gen = Rcpp::wrap(is_window_state_(flag));
    return rcpp_result_gen;
END_RCPP
}
// set_window_state_
void set_window_state_(unsigned int flags);
RcppExport SEXP _raylibr_set_window_state_(SEXP flagsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type flags(flagsSEXP);
    set_window_state_(flags);
    return R_NilValue;
END_RCPP
}
// clear_window_state_
void clear_window_state_(unsigned int flags);
RcppExport SEXP _raylibr_clear_window_state_(SEXP flagsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type flags(flagsSEXP);
    clear_window_state_(flags);
    return R_NilValue;
END_RCPP
}
// toggle_fullscreen_
void toggle_fullscreen_();
RcppExport SEXP _raylibr_toggle_fullscreen_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    toggle_fullscreen_();
    return R_NilValue;
END_RCPP
}
// maximize_window_
void maximize_window_();
RcppExport SEXP _raylibr_maximize_window_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    maximize_window_();
    return R_NilValue;
END_RCPP
}
// minimize_window_
void minimize_window_();
RcppExport SEXP _raylibr_minimize_window_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    minimize_window_();
    return R_NilValue;
END_RCPP
}
// restore_window_
void restore_window_();
RcppExport SEXP _raylibr_restore_window_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    restore_window_();
    return R_NilValue;
END_RCPP
}
// set_window_icon_
void set_window_icon_(Image image);
RcppExport SEXP _raylibr_set_window_icon_(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    set_window_icon_(image);
    return R_NilValue;
END_RCPP
}
// set_window_title_
void set_window_title_(const char * title);
RcppExport SEXP _raylibr_set_window_title_(SEXP titleSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type title(titleSEXP);
    set_window_title_(title);
    return R_NilValue;
END_RCPP
}
// set_window_position_
void set_window_position_(int x, int y);
RcppExport SEXP _raylibr_set_window_position_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    set_window_position_(x, y);
    return R_NilValue;
END_RCPP
}
// set_window_monitor_
void set_window_monitor_(int monitor);
RcppExport SEXP _raylibr_set_window_monitor_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    set_window_monitor_(monitor);
    return R_NilValue;
END_RCPP
}
// set_window_min_size_
void set_window_min_size_(int width, int height);
RcppExport SEXP _raylibr_set_window_min_size_(SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    set_window_min_size_(width, height);
    return R_NilValue;
END_RCPP
}
// set_window_size_
void set_window_size_(int width, int height);
RcppExport SEXP _raylibr_set_window_size_(SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    set_window_size_(width, height);
    return R_NilValue;
END_RCPP
}
// get_screen_width_
int get_screen_width_();
RcppExport SEXP _raylibr_get_screen_width_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_screen_width_());
    return rcpp_result_gen;
END_RCPP
}
// get_screen_height_
int get_screen_height_();
RcppExport SEXP _raylibr_get_screen_height_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_screen_height_());
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_count_
int get_monitor_count_();
RcppExport SEXP _raylibr_get_monitor_count_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_monitor_count_());
    return rcpp_result_gen;
END_RCPP
}
// get_current_monitor_
int get_current_monitor_();
RcppExport SEXP _raylibr_get_current_monitor_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_current_monitor_());
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_position_
Vector2 get_monitor_position_(int monitor);
RcppExport SEXP _raylibr_get_monitor_position_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_position_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_width_
int get_monitor_width_(int monitor);
RcppExport SEXP _raylibr_get_monitor_width_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_width_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_height_
int get_monitor_height_(int monitor);
RcppExport SEXP _raylibr_get_monitor_height_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_height_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_physical_width_
int get_monitor_physical_width_(int monitor);
RcppExport SEXP _raylibr_get_monitor_physical_width_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_physical_width_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_physical_height_
int get_monitor_physical_height_(int monitor);
RcppExport SEXP _raylibr_get_monitor_physical_height_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_physical_height_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_refresh_rate_
int get_monitor_refresh_rate_(int monitor);
RcppExport SEXP _raylibr_get_monitor_refresh_rate_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_refresh_rate_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// get_window_position_
Vector2 get_window_position_();
RcppExport SEXP _raylibr_get_window_position_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_window_position_());
    return rcpp_result_gen;
END_RCPP
}
// get_window_scale_dpi_
Vector2 get_window_scale_dpi_();
RcppExport SEXP _raylibr_get_window_scale_dpi_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_window_scale_dpi_());
    return rcpp_result_gen;
END_RCPP
}
// get_monitor_name_
const char * get_monitor_name_(int monitor);
RcppExport SEXP _raylibr_get_monitor_name_(SEXP monitorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type monitor(monitorSEXP);
    rcpp_result_gen = Rcpp::wrap(get_monitor_name_(monitor));
    return rcpp_result_gen;
END_RCPP
}
// show_cursor_
void show_cursor_();
RcppExport SEXP _raylibr_show_cursor_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    show_cursor_();
    return R_NilValue;
END_RCPP
}
// hide_cursor_
void hide_cursor_();
RcppExport SEXP _raylibr_hide_cursor_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    hide_cursor_();
    return R_NilValue;
END_RCPP
}
// is_cursor_hidden_
bool is_cursor_hidden_();
RcppExport SEXP _raylibr_is_cursor_hidden_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_cursor_hidden_());
    return rcpp_result_gen;
END_RCPP
}
// enable_cursor_
void enable_cursor_();
RcppExport SEXP _raylibr_enable_cursor_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    enable_cursor_();
    return R_NilValue;
END_RCPP
}
// disable_cursor_
void disable_cursor_();
RcppExport SEXP _raylibr_disable_cursor_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    disable_cursor_();
    return R_NilValue;
END_RCPP
}
// is_cursor_on_screen_
bool is_cursor_on_screen_();
RcppExport SEXP _raylibr_is_cursor_on_screen_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_cursor_on_screen_());
    return rcpp_result_gen;
END_RCPP
}
// clear_background_
void clear_background_(Color color);
RcppExport SEXP _raylibr_clear_background_(SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    clear_background_(color);
    return R_NilValue;
END_RCPP
}
// begin_drawing_
void begin_drawing_();
RcppExport SEXP _raylibr_begin_drawing_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    begin_drawing_();
    return R_NilValue;
END_RCPP
}
// end_drawing_
void end_drawing_();
RcppExport SEXP _raylibr_end_drawing_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    end_drawing_();
    return R_NilValue;
END_RCPP
}
// begin_mode_2d_
void begin_mode_2d_(Camera2D camera);
RcppExport SEXP _raylibr_begin_mode_2d_(SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type camera(cameraSEXP);
    begin_mode_2d_(camera);
    return R_NilValue;
END_RCPP
}
// end_mode_2d_
void end_mode_2d_();
RcppExport SEXP _raylibr_end_mode_2d_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    end_mode_2d_();
    return R_NilValue;
END_RCPP
}
// begin_mode_3d_
void begin_mode_3d_(Camera3D camera);
RcppExport SEXP _raylibr_begin_mode_3d_(SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type camera(cameraSEXP);
    begin_mode_3d_(camera);
    return R_NilValue;
END_RCPP
}
// end_mode_3d_
void end_mode_3d_();
RcppExport SEXP _raylibr_end_mode_3d_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    end_mode_3d_();
    return R_NilValue;
END_RCPP
}
// get_camera_matrix_
RaylibMatrix get_camera_matrix_(Camera3D camera);
RcppExport SEXP _raylibr_get_camera_matrix_(SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera3D >::type camera(cameraSEXP);
    rcpp_result_gen = Rcpp::wrap(get_camera_matrix_(camera));
    return rcpp_result_gen;
END_RCPP
}
// get_camera_matrix_2d_
RaylibMatrix get_camera_matrix_2d_(Camera2D camera);
RcppExport SEXP _raylibr_get_camera_matrix_2d_(SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Camera2D >::type camera(cameraSEXP);
    rcpp_result_gen = Rcpp::wrap(get_camera_matrix_2d_(camera));
    return rcpp_result_gen;
END_RCPP
}
// get_world_to_screen_
Vector2 get_world_to_screen_(Vector3 position, Camera3D camera);
RcppExport SEXP _raylibr_get_world_to_screen_(SEXP positionSEXP, SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector3 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Camera3D >::type camera(cameraSEXP);
    rcpp_result_gen = Rcpp::wrap(get_world_to_screen_(position, camera));
    return rcpp_result_gen;
END_RCPP
}
// get_world_to_screen_ex_
Vector2 get_world_to_screen_ex_(Vector3 position, Camera3D camera, int width, int height);
RcppExport SEXP _raylibr_get_world_to_screen_ex_(SEXP positionSEXP, SEXP cameraSEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector3 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Camera3D >::type camera(cameraSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(get_world_to_screen_ex_(position, camera, width, height));
    return rcpp_result_gen;
END_RCPP
}
// get_world_to_screen_2d_
Vector2 get_world_to_screen_2d_(Vector2 position, Camera2D camera);
RcppExport SEXP _raylibr_get_world_to_screen_2d_(SEXP positionSEXP, SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Camera2D >::type camera(cameraSEXP);
    rcpp_result_gen = Rcpp::wrap(get_world_to_screen_2d_(position, camera));
    return rcpp_result_gen;
END_RCPP
}
// get_screen_to_world_2d_
Vector2 get_screen_to_world_2d_(Vector2 position, Camera2D camera);
RcppExport SEXP _raylibr_get_screen_to_world_2d_(SEXP positionSEXP, SEXP cameraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Camera2D >::type camera(cameraSEXP);
    rcpp_result_gen = Rcpp::wrap(get_screen_to_world_2d_(position, camera));
    return rcpp_result_gen;
END_RCPP
}
// set_target_fps_
void set_target_fps_(int fps);
RcppExport SEXP _raylibr_set_target_fps_(SEXP fpsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type fps(fpsSEXP);
    set_target_fps_(fps);
    return R_NilValue;
END_RCPP
}
// get_fps_
int get_fps_();
RcppExport SEXP _raylibr_get_fps_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_fps_());
    return rcpp_result_gen;
END_RCPP
}
// get_frame_time_
float get_frame_time_();
RcppExport SEXP _raylibr_get_frame_time_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_frame_time_());
    return rcpp_result_gen;
END_RCPP
}
// get_time_
double get_time_();
RcppExport SEXP _raylibr_get_time_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_time_());
    return rcpp_result_gen;
END_RCPP
}
// get_random_value_
int get_random_value_(int min, int max);
RcppExport SEXP _raylibr_get_random_value_(SEXP minSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type min(minSEXP);
    Rcpp::traits::input_parameter< int >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_random_value_(min, max));
    return rcpp_result_gen;
END_RCPP
}
// take_screenshot_
void take_screenshot_(const char * file_name);
RcppExport SEXP _raylibr_take_screenshot_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    take_screenshot_(file_name);
    return R_NilValue;
END_RCPP
}
// is_key_pressed_
bool is_key_pressed_(int key);
RcppExport SEXP _raylibr_is_key_pressed_(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(is_key_pressed_(key));
    return rcpp_result_gen;
END_RCPP
}
// is_key_down_
bool is_key_down_(int key);
RcppExport SEXP _raylibr_is_key_down_(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(is_key_down_(key));
    return rcpp_result_gen;
END_RCPP
}
// is_key_released_
bool is_key_released_(int key);
RcppExport SEXP _raylibr_is_key_released_(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(is_key_released_(key));
    return rcpp_result_gen;
END_RCPP
}
// is_key_up_
bool is_key_up_(int key);
RcppExport SEXP _raylibr_is_key_up_(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key(keySEXP);
    rcpp_result_gen = Rcpp::wrap(is_key_up_(key));
    return rcpp_result_gen;
END_RCPP
}
// set_exit_key_
void set_exit_key_(int key);
RcppExport SEXP _raylibr_set_exit_key_(SEXP keySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key(keySEXP);
    set_exit_key_(key);
    return R_NilValue;
END_RCPP
}
// get_key_pressed_
int get_key_pressed_();
RcppExport SEXP _raylibr_get_key_pressed_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_key_pressed_());
    return rcpp_result_gen;
END_RCPP
}
// get_char_pressed_
int get_char_pressed_();
RcppExport SEXP _raylibr_get_char_pressed_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_char_pressed_());
    return rcpp_result_gen;
END_RCPP
}
// is_mouse_button_pressed_
bool is_mouse_button_pressed_(int button);
RcppExport SEXP _raylibr_is_mouse_button_pressed_(SEXP buttonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type button(buttonSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mouse_button_pressed_(button));
    return rcpp_result_gen;
END_RCPP
}
// is_mouse_button_down_
bool is_mouse_button_down_(int button);
RcppExport SEXP _raylibr_is_mouse_button_down_(SEXP buttonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type button(buttonSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mouse_button_down_(button));
    return rcpp_result_gen;
END_RCPP
}
// is_mouse_button_released_
bool is_mouse_button_released_(int button);
RcppExport SEXP _raylibr_is_mouse_button_released_(SEXP buttonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type button(buttonSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mouse_button_released_(button));
    return rcpp_result_gen;
END_RCPP
}
// is_mouse_button_up_
bool is_mouse_button_up_(int button);
RcppExport SEXP _raylibr_is_mouse_button_up_(SEXP buttonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type button(buttonSEXP);
    rcpp_result_gen = Rcpp::wrap(is_mouse_button_up_(button));
    return rcpp_result_gen;
END_RCPP
}
// get_mouse_x_
int get_mouse_x_();
RcppExport SEXP _raylibr_get_mouse_x_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_mouse_x_());
    return rcpp_result_gen;
END_RCPP
}
// get_mouse_y_
int get_mouse_y_();
RcppExport SEXP _raylibr_get_mouse_y_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_mouse_y_());
    return rcpp_result_gen;
END_RCPP
}
// get_mouse_position_
Vector2 get_mouse_position_();
RcppExport SEXP _raylibr_get_mouse_position_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_mouse_position_());
    return rcpp_result_gen;
END_RCPP
}
// get_mouse_delta_
Vector2 get_mouse_delta_();
RcppExport SEXP _raylibr_get_mouse_delta_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_mouse_delta_());
    return rcpp_result_gen;
END_RCPP
}
// set_mouse_position_
void set_mouse_position_(int x, int y);
RcppExport SEXP _raylibr_set_mouse_position_(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    set_mouse_position_(x, y);
    return R_NilValue;
END_RCPP
}
// set_mouse_offset_
void set_mouse_offset_(int offset_x, int offset_y);
RcppExport SEXP _raylibr_set_mouse_offset_(SEXP offset_xSEXP, SEXP offset_ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type offset_x(offset_xSEXP);
    Rcpp::traits::input_parameter< int >::type offset_y(offset_ySEXP);
    set_mouse_offset_(offset_x, offset_y);
    return R_NilValue;
END_RCPP
}
// set_mouse_scale_
void set_mouse_scale_(float scale_x, float scale_y);
RcppExport SEXP _raylibr_set_mouse_scale_(SEXP scale_xSEXP, SEXP scale_ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type scale_x(scale_xSEXP);
    Rcpp::traits::input_parameter< float >::type scale_y(scale_ySEXP);
    set_mouse_scale_(scale_x, scale_y);
    return R_NilValue;
END_RCPP
}
// get_mouse_wheel_move_
float get_mouse_wheel_move_();
RcppExport SEXP _raylibr_get_mouse_wheel_move_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_mouse_wheel_move_());
    return rcpp_result_gen;
END_RCPP
}
// set_mouse_cursor_
void set_mouse_cursor_(int cursor);
RcppExport SEXP _raylibr_set_mouse_cursor_(SEXP cursorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type cursor(cursorSEXP);
    set_mouse_cursor_(cursor);
    return R_NilValue;
END_RCPP
}
// set_camera_pan_control_
void set_camera_pan_control_(int key_pan);
RcppExport SEXP _raylibr_set_camera_pan_control_(SEXP key_panSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key_pan(key_panSEXP);
    set_camera_pan_control_(key_pan);
    return R_NilValue;
END_RCPP
}
// set_camera_alt_control_
void set_camera_alt_control_(int key_alt);
RcppExport SEXP _raylibr_set_camera_alt_control_(SEXP key_altSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key_alt(key_altSEXP);
    set_camera_alt_control_(key_alt);
    return R_NilValue;
END_RCPP
}
// set_camera_smooth_zoom_control_
void set_camera_smooth_zoom_control_(int key_smooth_zoom);
RcppExport SEXP _raylibr_set_camera_smooth_zoom_control_(SEXP key_smooth_zoomSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key_smooth_zoom(key_smooth_zoomSEXP);
    set_camera_smooth_zoom_control_(key_smooth_zoom);
    return R_NilValue;
END_RCPP
}
// set_camera_move_controls_
void set_camera_move_controls_(int key_front, int key_back, int key_right, int key_left, int key_up, int key_down);
RcppExport SEXP _raylibr_set_camera_move_controls_(SEXP key_frontSEXP, SEXP key_backSEXP, SEXP key_rightSEXP, SEXP key_leftSEXP, SEXP key_upSEXP, SEXP key_downSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type key_front(key_frontSEXP);
    Rcpp::traits::input_parameter< int >::type key_back(key_backSEXP);
    Rcpp::traits::input_parameter< int >::type key_right(key_rightSEXP);
    Rcpp::traits::input_parameter< int >::type key_left(key_leftSEXP);
    Rcpp::traits::input_parameter< int >::type key_up(key_upSEXP);
    Rcpp::traits::input_parameter< int >::type key_down(key_downSEXP);
    set_camera_move_controls_(key_front, key_back, key_right, key_left, key_up, key_down);
    return R_NilValue;
END_RCPP
}
// set_shapes_texture_
void set_shapes_texture_(Texture texture, Rectangle source);
RcppExport SEXP _raylibr_set_shapes_texture_(SEXP textureSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    Rcpp::traits::input_parameter< Rectangle >::type source(sourceSEXP);
    set_shapes_texture_(texture, source);
    return R_NilValue;
END_RCPP
}
// draw_pixel_
void draw_pixel_(int pos_x, int pos_y, Color color);
RcppExport SEXP _raylibr_draw_pixel_(SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_pixel_(pos_x, pos_y, color);
    return R_NilValue;
END_RCPP
}
// draw_pixel_v_
void draw_pixel_v_(Vector2 position, Color color);
RcppExport SEXP _raylibr_draw_pixel_v_(SEXP positionSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_pixel_v_(position, color);
    return R_NilValue;
END_RCPP
}
// draw_line_
void draw_line_(int start_pos_x, int start_pos_y, int end_pos_x, int end_pos_y, Color color);
RcppExport SEXP _raylibr_draw_line_(SEXP start_pos_xSEXP, SEXP start_pos_ySEXP, SEXP end_pos_xSEXP, SEXP end_pos_ySEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_pos_x(start_pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type start_pos_y(start_pos_ySEXP);
    Rcpp::traits::input_parameter< int >::type end_pos_x(end_pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type end_pos_y(end_pos_ySEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_line_(start_pos_x, start_pos_y, end_pos_x, end_pos_y, color);
    return R_NilValue;
END_RCPP
}
// draw_line_v_
void draw_line_v_(Vector2 start_pos, Vector2 end_pos, Color color);
RcppExport SEXP _raylibr_draw_line_v_(SEXP start_posSEXP, SEXP end_posSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type start_pos(start_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type end_pos(end_posSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_line_v_(start_pos, end_pos, color);
    return R_NilValue;
END_RCPP
}
// draw_line_ex_
void draw_line_ex_(Vector2 start_pos, Vector2 end_pos, float thick, Color color);
RcppExport SEXP _raylibr_draw_line_ex_(SEXP start_posSEXP, SEXP end_posSEXP, SEXP thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type start_pos(start_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type end_pos(end_posSEXP);
    Rcpp::traits::input_parameter< float >::type thick(thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_line_ex_(start_pos, end_pos, thick, color);
    return R_NilValue;
END_RCPP
}
// draw_line_bezier_
void draw_line_bezier_(Vector2 start_pos, Vector2 end_pos, float thick, Color color);
RcppExport SEXP _raylibr_draw_line_bezier_(SEXP start_posSEXP, SEXP end_posSEXP, SEXP thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type start_pos(start_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type end_pos(end_posSEXP);
    Rcpp::traits::input_parameter< float >::type thick(thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_line_bezier_(start_pos, end_pos, thick, color);
    return R_NilValue;
END_RCPP
}
// draw_line_bezier_quad_
void draw_line_bezier_quad_(Vector2 start_pos, Vector2 end_pos, Vector2 control_pos, float thick, Color color);
RcppExport SEXP _raylibr_draw_line_bezier_quad_(SEXP start_posSEXP, SEXP end_posSEXP, SEXP control_posSEXP, SEXP thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type start_pos(start_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type end_pos(end_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type control_pos(control_posSEXP);
    Rcpp::traits::input_parameter< float >::type thick(thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_line_bezier_quad_(start_pos, end_pos, control_pos, thick, color);
    return R_NilValue;
END_RCPP
}
// draw_line_bezier_cubic_
void draw_line_bezier_cubic_(Vector2 start_pos, Vector2 end_pos, Vector2 start_control_pos, Vector2 end_control_pos, float thick, Color color);
RcppExport SEXP _raylibr_draw_line_bezier_cubic_(SEXP start_posSEXP, SEXP end_posSEXP, SEXP start_control_posSEXP, SEXP end_control_posSEXP, SEXP thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type start_pos(start_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type end_pos(end_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type start_control_pos(start_control_posSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type end_control_pos(end_control_posSEXP);
    Rcpp::traits::input_parameter< float >::type thick(thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_line_bezier_cubic_(start_pos, end_pos, start_control_pos, end_control_pos, thick, color);
    return R_NilValue;
END_RCPP
}
// draw_circle_
void draw_circle_(int center_x, int center_y, float radius, Color color);
RcppExport SEXP _raylibr_draw_circle_(SEXP center_xSEXP, SEXP center_ySEXP, SEXP radiusSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type center_x(center_xSEXP);
    Rcpp::traits::input_parameter< int >::type center_y(center_ySEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_circle_(center_x, center_y, radius, color);
    return R_NilValue;
END_RCPP
}
// draw_circle_sector_
void draw_circle_sector_(Vector2 center, float radius, float start_angle, float end_angle, int segments, Color color);
RcppExport SEXP _raylibr_draw_circle_sector_(SEXP centerSEXP, SEXP radiusSEXP, SEXP start_angleSEXP, SEXP end_angleSEXP, SEXP segmentsSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< float >::type start_angle(start_angleSEXP);
    Rcpp::traits::input_parameter< float >::type end_angle(end_angleSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_circle_sector_(center, radius, start_angle, end_angle, segments, color);
    return R_NilValue;
END_RCPP
}
// draw_circle_sector_lines_
void draw_circle_sector_lines_(Vector2 center, float radius, float start_angle, float end_angle, int segments, Color color);
RcppExport SEXP _raylibr_draw_circle_sector_lines_(SEXP centerSEXP, SEXP radiusSEXP, SEXP start_angleSEXP, SEXP end_angleSEXP, SEXP segmentsSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< float >::type start_angle(start_angleSEXP);
    Rcpp::traits::input_parameter< float >::type end_angle(end_angleSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_circle_sector_lines_(center, radius, start_angle, end_angle, segments, color);
    return R_NilValue;
END_RCPP
}
// draw_circle_gradient_
void draw_circle_gradient_(int center_x, int center_y, float radius, Color color_1, Color color_2);
RcppExport SEXP _raylibr_draw_circle_gradient_(SEXP center_xSEXP, SEXP center_ySEXP, SEXP radiusSEXP, SEXP color_1SEXP, SEXP color_2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type center_x(center_xSEXP);
    Rcpp::traits::input_parameter< int >::type center_y(center_ySEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Color >::type color_1(color_1SEXP);
    Rcpp::traits::input_parameter< Color >::type color_2(color_2SEXP);
    draw_circle_gradient_(center_x, center_y, radius, color_1, color_2);
    return R_NilValue;
END_RCPP
}
// draw_circle_v_
void draw_circle_v_(Vector2 center, float radius, Color color);
RcppExport SEXP _raylibr_draw_circle_v_(SEXP centerSEXP, SEXP radiusSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_circle_v_(center, radius, color);
    return R_NilValue;
END_RCPP
}
// draw_circle_lines_
void draw_circle_lines_(int center_x, int center_y, float radius, Color color);
RcppExport SEXP _raylibr_draw_circle_lines_(SEXP center_xSEXP, SEXP center_ySEXP, SEXP radiusSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type center_x(center_xSEXP);
    Rcpp::traits::input_parameter< int >::type center_y(center_ySEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_circle_lines_(center_x, center_y, radius, color);
    return R_NilValue;
END_RCPP
}
// draw_ellipse_
void draw_ellipse_(int center_x, int center_y, float radius_h, float radius_v, Color color);
RcppExport SEXP _raylibr_draw_ellipse_(SEXP center_xSEXP, SEXP center_ySEXP, SEXP radius_hSEXP, SEXP radius_vSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type center_x(center_xSEXP);
    Rcpp::traits::input_parameter< int >::type center_y(center_ySEXP);
    Rcpp::traits::input_parameter< float >::type radius_h(radius_hSEXP);
    Rcpp::traits::input_parameter< float >::type radius_v(radius_vSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_ellipse_(center_x, center_y, radius_h, radius_v, color);
    return R_NilValue;
END_RCPP
}
// draw_ellipse_lines_
void draw_ellipse_lines_(int center_x, int center_y, float radius_h, float radius_v, Color color);
RcppExport SEXP _raylibr_draw_ellipse_lines_(SEXP center_xSEXP, SEXP center_ySEXP, SEXP radius_hSEXP, SEXP radius_vSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type center_x(center_xSEXP);
    Rcpp::traits::input_parameter< int >::type center_y(center_ySEXP);
    Rcpp::traits::input_parameter< float >::type radius_h(radius_hSEXP);
    Rcpp::traits::input_parameter< float >::type radius_v(radius_vSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_ellipse_lines_(center_x, center_y, radius_h, radius_v, color);
    return R_NilValue;
END_RCPP
}
// draw_ring_
void draw_ring_(Vector2 center, float inner_radius, float outer_radius, float start_angle, float end_angle, int segments, Color color);
RcppExport SEXP _raylibr_draw_ring_(SEXP centerSEXP, SEXP inner_radiusSEXP, SEXP outer_radiusSEXP, SEXP start_angleSEXP, SEXP end_angleSEXP, SEXP segmentsSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type inner_radius(inner_radiusSEXP);
    Rcpp::traits::input_parameter< float >::type outer_radius(outer_radiusSEXP);
    Rcpp::traits::input_parameter< float >::type start_angle(start_angleSEXP);
    Rcpp::traits::input_parameter< float >::type end_angle(end_angleSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_ring_(center, inner_radius, outer_radius, start_angle, end_angle, segments, color);
    return R_NilValue;
END_RCPP
}
// draw_ring_lines_
void draw_ring_lines_(Vector2 center, float inner_radius, float outer_radius, float start_angle, float end_angle, int segments, Color color);
RcppExport SEXP _raylibr_draw_ring_lines_(SEXP centerSEXP, SEXP inner_radiusSEXP, SEXP outer_radiusSEXP, SEXP start_angleSEXP, SEXP end_angleSEXP, SEXP segmentsSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type inner_radius(inner_radiusSEXP);
    Rcpp::traits::input_parameter< float >::type outer_radius(outer_radiusSEXP);
    Rcpp::traits::input_parameter< float >::type start_angle(start_angleSEXP);
    Rcpp::traits::input_parameter< float >::type end_angle(end_angleSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_ring_lines_(center, inner_radius, outer_radius, start_angle, end_angle, segments, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_
void draw_rectangle_(int pos_x, int pos_y, int width, int height, Color color);
RcppExport SEXP _raylibr_draw_rectangle_(SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_(pos_x, pos_y, width, height, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_v_
void draw_rectangle_v_(Vector2 position, Vector2 size, Color color);
RcppExport SEXP _raylibr_draw_rectangle_v_(SEXP positionSEXP, SEXP sizeSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_v_(position, size, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_rec_
void draw_rectangle_rec_(Rectangle rec, Color color);
RcppExport SEXP _raylibr_draw_rectangle_rec_(SEXP recSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_rec_(rec, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_pro_
void draw_rectangle_pro_(Rectangle rec, Vector2 origin, float rotation, Color color);
RcppExport SEXP _raylibr_draw_rectangle_pro_(SEXP recSEXP, SEXP originSEXP, SEXP rotationSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type origin(originSEXP);
    Rcpp::traits::input_parameter< float >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_pro_(rec, origin, rotation, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_gradient_v_
void draw_rectangle_gradient_v_(int pos_x, int pos_y, int width, int height, Color color_1, Color color_2);
RcppExport SEXP _raylibr_draw_rectangle_gradient_v_(SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP color_1SEXP, SEXP color_2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type color_1(color_1SEXP);
    Rcpp::traits::input_parameter< Color >::type color_2(color_2SEXP);
    draw_rectangle_gradient_v_(pos_x, pos_y, width, height, color_1, color_2);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_gradient_h_
void draw_rectangle_gradient_h_(int pos_x, int pos_y, int width, int height, Color color_1, Color color_2);
RcppExport SEXP _raylibr_draw_rectangle_gradient_h_(SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP color_1SEXP, SEXP color_2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type color_1(color_1SEXP);
    Rcpp::traits::input_parameter< Color >::type color_2(color_2SEXP);
    draw_rectangle_gradient_h_(pos_x, pos_y, width, height, color_1, color_2);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_gradient_ex_
void draw_rectangle_gradient_ex_(Rectangle rec, Color col_1, Color col_2, Color col_3, Color col_4);
RcppExport SEXP _raylibr_draw_rectangle_gradient_ex_(SEXP recSEXP, SEXP col_1SEXP, SEXP col_2SEXP, SEXP col_3SEXP, SEXP col_4SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    Rcpp::traits::input_parameter< Color >::type col_1(col_1SEXP);
    Rcpp::traits::input_parameter< Color >::type col_2(col_2SEXP);
    Rcpp::traits::input_parameter< Color >::type col_3(col_3SEXP);
    Rcpp::traits::input_parameter< Color >::type col_4(col_4SEXP);
    draw_rectangle_gradient_ex_(rec, col_1, col_2, col_3, col_4);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_lines_
void draw_rectangle_lines_(int pos_x, int pos_y, int width, int height, Color color);
RcppExport SEXP _raylibr_draw_rectangle_lines_(SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_lines_(pos_x, pos_y, width, height, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_lines_ex_
void draw_rectangle_lines_ex_(Rectangle rec, float line_thick, Color color);
RcppExport SEXP _raylibr_draw_rectangle_lines_ex_(SEXP recSEXP, SEXP line_thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    Rcpp::traits::input_parameter< float >::type line_thick(line_thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_lines_ex_(rec, line_thick, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_rounded_
void draw_rectangle_rounded_(Rectangle rec, float roundness, int segments, Color color);
RcppExport SEXP _raylibr_draw_rectangle_rounded_(SEXP recSEXP, SEXP roundnessSEXP, SEXP segmentsSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    Rcpp::traits::input_parameter< float >::type roundness(roundnessSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_rounded_(rec, roundness, segments, color);
    return R_NilValue;
END_RCPP
}
// draw_rectangle_rounded_lines_
void draw_rectangle_rounded_lines_(Rectangle rec, float roundness, int segments, float line_thick, Color color);
RcppExport SEXP _raylibr_draw_rectangle_rounded_lines_(SEXP recSEXP, SEXP roundnessSEXP, SEXP segmentsSEXP, SEXP line_thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    Rcpp::traits::input_parameter< float >::type roundness(roundnessSEXP);
    Rcpp::traits::input_parameter< int >::type segments(segmentsSEXP);
    Rcpp::traits::input_parameter< float >::type line_thick(line_thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_rectangle_rounded_lines_(rec, roundness, segments, line_thick, color);
    return R_NilValue;
END_RCPP
}
// draw_triangle_
void draw_triangle_(Vector2 v_1, Vector2 v_2, Vector2 v_3, Color color);
RcppExport SEXP _raylibr_draw_triangle_(SEXP v_1SEXP, SEXP v_2SEXP, SEXP v_3SEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type v_1(v_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type v_2(v_2SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type v_3(v_3SEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_triangle_(v_1, v_2, v_3, color);
    return R_NilValue;
END_RCPP
}
// draw_triangle_lines_
void draw_triangle_lines_(Vector2 v_1, Vector2 v_2, Vector2 v_3, Color color);
RcppExport SEXP _raylibr_draw_triangle_lines_(SEXP v_1SEXP, SEXP v_2SEXP, SEXP v_3SEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type v_1(v_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type v_2(v_2SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type v_3(v_3SEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_triangle_lines_(v_1, v_2, v_3, color);
    return R_NilValue;
END_RCPP
}
// draw_poly_
void draw_poly_(Vector2 center, int sides, float radius, float rotation, Color color);
RcppExport SEXP _raylibr_draw_poly_(SEXP centerSEXP, SEXP sidesSEXP, SEXP radiusSEXP, SEXP rotationSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< int >::type sides(sidesSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< float >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_poly_(center, sides, radius, rotation, color);
    return R_NilValue;
END_RCPP
}
// draw_poly_lines_
void draw_poly_lines_(Vector2 center, int sides, float radius, float rotation, Color color);
RcppExport SEXP _raylibr_draw_poly_lines_(SEXP centerSEXP, SEXP sidesSEXP, SEXP radiusSEXP, SEXP rotationSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< int >::type sides(sidesSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< float >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_poly_lines_(center, sides, radius, rotation, color);
    return R_NilValue;
END_RCPP
}
// draw_poly_lines_ex_
void draw_poly_lines_ex_(Vector2 center, int sides, float radius, float rotation, float line_thick, Color color);
RcppExport SEXP _raylibr_draw_poly_lines_ex_(SEXP centerSEXP, SEXP sidesSEXP, SEXP radiusSEXP, SEXP rotationSEXP, SEXP line_thickSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< int >::type sides(sidesSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< float >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< float >::type line_thick(line_thickSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_poly_lines_ex_(center, sides, radius, rotation, line_thick, color);
    return R_NilValue;
END_RCPP
}
// check_collision_recs_
bool check_collision_recs_(Rectangle rec_1, Rectangle rec_2);
RcppExport SEXP _raylibr_check_collision_recs_(SEXP rec_1SEXP, SEXP rec_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec_1(rec_1SEXP);
    Rcpp::traits::input_parameter< Rectangle >::type rec_2(rec_2SEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_recs_(rec_1, rec_2));
    return rcpp_result_gen;
END_RCPP
}
// check_collision_circles_
bool check_collision_circles_(Vector2 center_1, float radius_1, Vector2 center_2, float radius_2);
RcppExport SEXP _raylibr_check_collision_circles_(SEXP center_1SEXP, SEXP radius_1SEXP, SEXP center_2SEXP, SEXP radius_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center_1(center_1SEXP);
    Rcpp::traits::input_parameter< float >::type radius_1(radius_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type center_2(center_2SEXP);
    Rcpp::traits::input_parameter< float >::type radius_2(radius_2SEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_circles_(center_1, radius_1, center_2, radius_2));
    return rcpp_result_gen;
END_RCPP
}
// check_collision_circle_rec_
bool check_collision_circle_rec_(Vector2 center, float radius, Rectangle rec);
RcppExport SEXP _raylibr_check_collision_circle_rec_(SEXP centerSEXP, SEXP radiusSEXP, SEXP recSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_circle_rec_(center, radius, rec));
    return rcpp_result_gen;
END_RCPP
}
// check_collision_point_rec_
bool check_collision_point_rec_(Vector2 point, Rectangle rec);
RcppExport SEXP _raylibr_check_collision_point_rec_(SEXP pointSEXP, SEXP recSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type point(pointSEXP);
    Rcpp::traits::input_parameter< Rectangle >::type rec(recSEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_point_rec_(point, rec));
    return rcpp_result_gen;
END_RCPP
}
// check_collision_point_circle_
bool check_collision_point_circle_(Vector2 point, Vector2 center, float radius);
RcppExport SEXP _raylibr_check_collision_point_circle_(SEXP pointSEXP, SEXP centerSEXP, SEXP radiusSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type point(pointSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type center(centerSEXP);
    Rcpp::traits::input_parameter< float >::type radius(radiusSEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_point_circle_(point, center, radius));
    return rcpp_result_gen;
END_RCPP
}
// check_collision_point_triangle_
bool check_collision_point_triangle_(Vector2 point, Vector2 p_1, Vector2 p_2, Vector2 p_3);
RcppExport SEXP _raylibr_check_collision_point_triangle_(SEXP pointSEXP, SEXP p_1SEXP, SEXP p_2SEXP, SEXP p_3SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type point(pointSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type p_1(p_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type p_2(p_2SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type p_3(p_3SEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_point_triangle_(point, p_1, p_2, p_3));
    return rcpp_result_gen;
END_RCPP
}
// check_collision_point_line_
bool check_collision_point_line_(Vector2 point, Vector2 p_1, Vector2 p_2, int threshold);
RcppExport SEXP _raylibr_check_collision_point_line_(SEXP pointSEXP, SEXP p_1SEXP, SEXP p_2SEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type point(pointSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type p_1(p_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type p_2(p_2SEXP);
    Rcpp::traits::input_parameter< int >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(check_collision_point_line_(point, p_1, p_2, threshold));
    return rcpp_result_gen;
END_RCPP
}
// get_collision_rec_
Rectangle get_collision_rec_(Rectangle rec_1, Rectangle rec_2);
RcppExport SEXP _raylibr_get_collision_rec_(SEXP rec_1SEXP, SEXP rec_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type rec_1(rec_1SEXP);
    Rcpp::traits::input_parameter< Rectangle >::type rec_2(rec_2SEXP);
    rcpp_result_gen = Rcpp::wrap(get_collision_rec_(rec_1, rec_2));
    return rcpp_result_gen;
END_RCPP
}
// load_image_
Image load_image_(const char * file_name);
RcppExport SEXP _raylibr_load_image_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_image_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// load_image_raw_
Image load_image_raw_(const char * file_name, int width, int height, int format, int header_size);
RcppExport SEXP _raylibr_load_image_raw_(SEXP file_nameSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP formatSEXP, SEXP header_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type format(formatSEXP);
    Rcpp::traits::input_parameter< int >::type header_size(header_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(load_image_raw_(file_name, width, height, format, header_size));
    return rcpp_result_gen;
END_RCPP
}
// load_image_from_texture_
Image load_image_from_texture_(Texture texture);
RcppExport SEXP _raylibr_load_image_from_texture_(SEXP textureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    rcpp_result_gen = Rcpp::wrap(load_image_from_texture_(texture));
    return rcpp_result_gen;
END_RCPP
}
// load_image_from_screen_
Image load_image_from_screen_();
RcppExport SEXP _raylibr_load_image_from_screen_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(load_image_from_screen_());
    return rcpp_result_gen;
END_RCPP
}
// unload_image_
void unload_image_(Image image);
RcppExport SEXP _raylibr_unload_image_(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    unload_image_(image);
    return R_NilValue;
END_RCPP
}
// export_image_
bool export_image_(Image image, const char * file_name);
RcppExport SEXP _raylibr_export_image_(SEXP imageSEXP, SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(export_image_(image, file_name));
    return rcpp_result_gen;
END_RCPP
}
// export_image_as_code_
bool export_image_as_code_(Image image, const char * file_name);
RcppExport SEXP _raylibr_export_image_as_code_(SEXP imageSEXP, SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(export_image_as_code_(image, file_name));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_color_
Image gen_image_color_(int width, int height, Color color);
RcppExport SEXP _raylibr_gen_image_color_(SEXP widthSEXP, SEXP heightSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_color_(width, height, color));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_gradient_v_
Image gen_image_gradient_v_(int width, int height, Color top, Color bottom);
RcppExport SEXP _raylibr_gen_image_gradient_v_(SEXP widthSEXP, SEXP heightSEXP, SEXP topSEXP, SEXP bottomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type top(topSEXP);
    Rcpp::traits::input_parameter< Color >::type bottom(bottomSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_gradient_v_(width, height, top, bottom));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_gradient_h_
Image gen_image_gradient_h_(int width, int height, Color left, Color right);
RcppExport SEXP _raylibr_gen_image_gradient_h_(SEXP widthSEXP, SEXP heightSEXP, SEXP leftSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< Color >::type left(leftSEXP);
    Rcpp::traits::input_parameter< Color >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_gradient_h_(width, height, left, right));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_gradient_radial_
Image gen_image_gradient_radial_(int width, int height, float density, Color inner, Color outer);
RcppExport SEXP _raylibr_gen_image_gradient_radial_(SEXP widthSEXP, SEXP heightSEXP, SEXP densitySEXP, SEXP innerSEXP, SEXP outerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< float >::type density(densitySEXP);
    Rcpp::traits::input_parameter< Color >::type inner(innerSEXP);
    Rcpp::traits::input_parameter< Color >::type outer(outerSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_gradient_radial_(width, height, density, inner, outer));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_checked_
Image gen_image_checked_(int width, int height, int checks_x, int checks_y, Color col_1, Color col_2);
RcppExport SEXP _raylibr_gen_image_checked_(SEXP widthSEXP, SEXP heightSEXP, SEXP checks_xSEXP, SEXP checks_ySEXP, SEXP col_1SEXP, SEXP col_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type checks_x(checks_xSEXP);
    Rcpp::traits::input_parameter< int >::type checks_y(checks_ySEXP);
    Rcpp::traits::input_parameter< Color >::type col_1(col_1SEXP);
    Rcpp::traits::input_parameter< Color >::type col_2(col_2SEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_checked_(width, height, checks_x, checks_y, col_1, col_2));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_white_noise_
Image gen_image_white_noise_(int width, int height, float factor);
RcppExport SEXP _raylibr_gen_image_white_noise_(SEXP widthSEXP, SEXP heightSEXP, SEXP factorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< float >::type factor(factorSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_white_noise_(width, height, factor));
    return rcpp_result_gen;
END_RCPP
}
// gen_image_cellular_
Image gen_image_cellular_(int width, int height, int tile_size);
RcppExport SEXP _raylibr_gen_image_cellular_(SEXP widthSEXP, SEXP heightSEXP, SEXP tile_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type tile_size(tile_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_image_cellular_(width, height, tile_size));
    return rcpp_result_gen;
END_RCPP
}
// get_image_alpha_border_
Rectangle get_image_alpha_border_(Image image, float threshold);
RcppExport SEXP _raylibr_get_image_alpha_border_(SEXP imageSEXP, SEXP thresholdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    Rcpp::traits::input_parameter< float >::type threshold(thresholdSEXP);
    rcpp_result_gen = Rcpp::wrap(get_image_alpha_border_(image, threshold));
    return rcpp_result_gen;
END_RCPP
}
// load_texture_
Texture load_texture_(const char * file_name);
RcppExport SEXP _raylibr_load_texture_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_texture_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// load_texture_from_image_
Texture load_texture_from_image_(Image image);
RcppExport SEXP _raylibr_load_texture_from_image_(SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(load_texture_from_image_(image));
    return rcpp_result_gen;
END_RCPP
}
// draw_texture_
void draw_texture_(Texture texture, int pos_x, int pos_y, Color tint);
RcppExport SEXP _raylibr_draw_texture_(SEXP textureSEXP, SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP tintSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< Color >::type tint(tintSEXP);
    draw_texture_(texture, pos_x, pos_y, tint);
    return R_NilValue;
END_RCPP
}
// fade_
Color fade_(Color color, float alpha);
RcppExport SEXP _raylibr_fade_(SEXP colorSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(fade_(color, alpha));
    return rcpp_result_gen;
END_RCPP
}
// color_to_int_
int color_to_int_(Color color);
RcppExport SEXP _raylibr_color_to_int_(SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(color_to_int_(color));
    return rcpp_result_gen;
END_RCPP
}
// color_normalize_
Vector4 color_normalize_(Color color);
RcppExport SEXP _raylibr_color_normalize_(SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(color_normalize_(color));
    return rcpp_result_gen;
END_RCPP
}
// color_from_normalized_
Color color_from_normalized_(Vector4 normalized);
RcppExport SEXP _raylibr_color_from_normalized_(SEXP normalizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector4 >::type normalized(normalizedSEXP);
    rcpp_result_gen = Rcpp::wrap(color_from_normalized_(normalized));
    return rcpp_result_gen;
END_RCPP
}
// color_to_hsv_
Vector3 color_to_hsv_(Color color);
RcppExport SEXP _raylibr_color_to_hsv_(SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(color_to_hsv_(color));
    return rcpp_result_gen;
END_RCPP
}
// color_from_hsv_
Color color_from_hsv_(float hue, float saturation, float value);
RcppExport SEXP _raylibr_color_from_hsv_(SEXP hueSEXP, SEXP saturationSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type hue(hueSEXP);
    Rcpp::traits::input_parameter< float >::type saturation(saturationSEXP);
    Rcpp::traits::input_parameter< float >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(color_from_hsv_(hue, saturation, value));
    return rcpp_result_gen;
END_RCPP
}
// color_alpha_
Color color_alpha_(Color color, float alpha);
RcppExport SEXP _raylibr_color_alpha_(SEXP colorSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    Rcpp::traits::input_parameter< float >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(color_alpha_(color, alpha));
    return rcpp_result_gen;
END_RCPP
}
// color_alpha_blend_
Color color_alpha_blend_(Color dst, Color src, Color tint);
RcppExport SEXP _raylibr_color_alpha_blend_(SEXP dstSEXP, SEXP srcSEXP, SEXP tintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Color >::type dst(dstSEXP);
    Rcpp::traits::input_parameter< Color >::type src(srcSEXP);
    Rcpp::traits::input_parameter< Color >::type tint(tintSEXP);
    rcpp_result_gen = Rcpp::wrap(color_alpha_blend_(dst, src, tint));
    return rcpp_result_gen;
END_RCPP
}
// get_color_
Color get_color_(unsigned int hex_value);
RcppExport SEXP _raylibr_get_color_(SEXP hex_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type hex_value(hex_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(get_color_(hex_value));
    return rcpp_result_gen;
END_RCPP
}
// get_font_default_
Font get_font_default_();
RcppExport SEXP _raylibr_get_font_default_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_font_default_());
    return rcpp_result_gen;
END_RCPP
}
// load_font_
Font load_font_(const char * file_name);
RcppExport SEXP _raylibr_load_font_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_font_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// unload_font_
void unload_font_(Font font);
RcppExport SEXP _raylibr_unload_font_(SEXP fontSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Font >::type font(fontSEXP);
    unload_font_(font);
    return R_NilValue;
END_RCPP
}
// draw_fps_
void draw_fps_(int pos_x, int pos_y);
RcppExport SEXP _raylibr_draw_fps_(SEXP pos_xSEXP, SEXP pos_ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    draw_fps_(pos_x, pos_y);
    return R_NilValue;
END_RCPP
}
// draw_text_
void draw_text_(const char * text, int pos_x, int pos_y, int font_size, Color color);
RcppExport SEXP _raylibr_draw_text_(SEXP textSEXP, SEXP pos_xSEXP, SEXP pos_ySEXP, SEXP font_sizeSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type text(textSEXP);
    Rcpp::traits::input_parameter< int >::type pos_x(pos_xSEXP);
    Rcpp::traits::input_parameter< int >::type pos_y(pos_ySEXP);
    Rcpp::traits::input_parameter< int >::type font_size(font_sizeSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_text_(text, pos_x, pos_y, font_size, color);
    return R_NilValue;
END_RCPP
}
// draw_text_ex_
void draw_text_ex_(Font font, const char * text, Vector2 position, float font_size, float spacing, Color tint);
RcppExport SEXP _raylibr_draw_text_ex_(SEXP fontSEXP, SEXP textSEXP, SEXP positionSEXP, SEXP font_sizeSEXP, SEXP spacingSEXP, SEXP tintSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Font >::type font(fontSEXP);
    Rcpp::traits::input_parameter< const char * >::type text(textSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< float >::type font_size(font_sizeSEXP);
    Rcpp::traits::input_parameter< float >::type spacing(spacingSEXP);
    Rcpp::traits::input_parameter< Color >::type tint(tintSEXP);
    draw_text_ex_(font, text, position, font_size, spacing, tint);
    return R_NilValue;
END_RCPP
}
// measure_text_
int measure_text_(const char * text, int font_size);
RcppExport SEXP _raylibr_measure_text_(SEXP textSEXP, SEXP font_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type text(textSEXP);
    Rcpp::traits::input_parameter< int >::type font_size(font_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(measure_text_(text, font_size));
    return rcpp_result_gen;
END_RCPP
}
// measure_text_ex_
Vector2 measure_text_ex_(Font font, const char * text, float font_size, float spacing);
RcppExport SEXP _raylibr_measure_text_ex_(SEXP fontSEXP, SEXP textSEXP, SEXP font_sizeSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Font >::type font(fontSEXP);
    Rcpp::traits::input_parameter< const char * >::type text(textSEXP);
    Rcpp::traits::input_parameter< float >::type font_size(font_sizeSEXP);
    Rcpp::traits::input_parameter< float >::type spacing(spacingSEXP);
    rcpp_result_gen = Rcpp::wrap(measure_text_ex_(font, text, font_size, spacing));
    return rcpp_result_gen;
END_RCPP
}
// draw_cube_
void draw_cube_(Vector3 position, float width, float height, float length, Color color);
RcppExport SEXP _raylibr_draw_cube_(SEXP positionSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP lengthSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector3 >::type position(positionSEXP);
    Rcpp::traits::input_parameter< float >::type width(widthSEXP);
    Rcpp::traits::input_parameter< float >::type height(heightSEXP);
    Rcpp::traits::input_parameter< float >::type length(lengthSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    draw_cube_(position, width, height, length, color);
    return R_NilValue;
END_RCPP
}
// draw_grid_
void draw_grid_(int slices, float spacing);
RcppExport SEXP _raylibr_draw_grid_(SEXP slicesSEXP, SEXP spacingSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type slices(slicesSEXP);
    Rcpp::traits::input_parameter< float >::type spacing(spacingSEXP);
    draw_grid_(slices, spacing);
    return R_NilValue;
END_RCPP
}
// init_audio_device_
void init_audio_device_();
RcppExport SEXP _raylibr_init_audio_device_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    init_audio_device_();
    return R_NilValue;
END_RCPP
}
// close_audio_device_
void close_audio_device_();
RcppExport SEXP _raylibr_close_audio_device_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    close_audio_device_();
    return R_NilValue;
END_RCPP
}
// is_audio_device_ready_
bool is_audio_device_ready_();
RcppExport SEXP _raylibr_is_audio_device_ready_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(is_audio_device_ready_());
    return rcpp_result_gen;
END_RCPP
}
// set_master_volume_
void set_master_volume_(float volume);
RcppExport SEXP _raylibr_set_master_volume_(SEXP volumeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type volume(volumeSEXP);
    set_master_volume_(volume);
    return R_NilValue;
END_RCPP
}
// load_wave_
Wave load_wave_(const char * file_name);
RcppExport SEXP _raylibr_load_wave_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_wave_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// load_sound_
Sound load_sound_(const char * file_name);
RcppExport SEXP _raylibr_load_sound_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_sound_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// load_sound_from_wave_
Sound load_sound_from_wave_(Wave wave);
RcppExport SEXP _raylibr_load_sound_from_wave_(SEXP waveSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Wave >::type wave(waveSEXP);
    rcpp_result_gen = Rcpp::wrap(load_sound_from_wave_(wave));
    return rcpp_result_gen;
END_RCPP
}
// unload_wave_
void unload_wave_(Wave wave);
RcppExport SEXP _raylibr_unload_wave_(SEXP waveSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Wave >::type wave(waveSEXP);
    unload_wave_(wave);
    return R_NilValue;
END_RCPP
}
// unload_sound_
void unload_sound_(Sound sound);
RcppExport SEXP _raylibr_unload_sound_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    unload_sound_(sound);
    return R_NilValue;
END_RCPP
}
// play_sound_
void play_sound_(Sound sound);
RcppExport SEXP _raylibr_play_sound_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    play_sound_(sound);
    return R_NilValue;
END_RCPP
}
// stop_sound_
void stop_sound_(Sound sound);
RcppExport SEXP _raylibr_stop_sound_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    stop_sound_(sound);
    return R_NilValue;
END_RCPP
}
// pause_sound_
void pause_sound_(Sound sound);
RcppExport SEXP _raylibr_pause_sound_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    pause_sound_(sound);
    return R_NilValue;
END_RCPP
}
// resume_sound_
void resume_sound_(Sound sound);
RcppExport SEXP _raylibr_resume_sound_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    resume_sound_(sound);
    return R_NilValue;
END_RCPP
}
// play_sound_multi_
void play_sound_multi_(Sound sound);
RcppExport SEXP _raylibr_play_sound_multi_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    play_sound_multi_(sound);
    return R_NilValue;
END_RCPP
}
// stop_sound_multi_
void stop_sound_multi_();
RcppExport SEXP _raylibr_stop_sound_multi_() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    stop_sound_multi_();
    return R_NilValue;
END_RCPP
}
// get_sounds_playing_
int get_sounds_playing_();
RcppExport SEXP _raylibr_get_sounds_playing_() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_sounds_playing_());
    return rcpp_result_gen;
END_RCPP
}
// is_sound_playing_
bool is_sound_playing_(Sound sound);
RcppExport SEXP _raylibr_is_sound_playing_(SEXP soundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    rcpp_result_gen = Rcpp::wrap(is_sound_playing_(sound));
    return rcpp_result_gen;
END_RCPP
}
// set_sound_volume_
void set_sound_volume_(Sound sound, float volume);
RcppExport SEXP _raylibr_set_sound_volume_(SEXP soundSEXP, SEXP volumeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    Rcpp::traits::input_parameter< float >::type volume(volumeSEXP);
    set_sound_volume_(sound, volume);
    return R_NilValue;
END_RCPP
}
// set_sound_pitch_
void set_sound_pitch_(Sound sound, float pitch);
RcppExport SEXP _raylibr_set_sound_pitch_(SEXP soundSEXP, SEXP pitchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type sound(soundSEXP);
    Rcpp::traits::input_parameter< float >::type pitch(pitchSEXP);
    set_sound_pitch_(sound, pitch);
    return R_NilValue;
END_RCPP
}
// load_music_stream_
Music load_music_stream_(const char * file_name);
RcppExport SEXP _raylibr_load_music_stream_(SEXP file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char * >::type file_name(file_nameSEXP);
    rcpp_result_gen = Rcpp::wrap(load_music_stream_(file_name));
    return rcpp_result_gen;
END_RCPP
}
// unload_music_stream_
void unload_music_stream_(Music music);
RcppExport SEXP _raylibr_unload_music_stream_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    unload_music_stream_(music);
    return R_NilValue;
END_RCPP
}
// play_music_stream_
void play_music_stream_(Music music);
RcppExport SEXP _raylibr_play_music_stream_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    play_music_stream_(music);
    return R_NilValue;
END_RCPP
}
// is_music_stream_playing_
bool is_music_stream_playing_(Music music);
RcppExport SEXP _raylibr_is_music_stream_playing_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    rcpp_result_gen = Rcpp::wrap(is_music_stream_playing_(music));
    return rcpp_result_gen;
END_RCPP
}
// update_music_stream_
void update_music_stream_(Music music);
RcppExport SEXP _raylibr_update_music_stream_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    update_music_stream_(music);
    return R_NilValue;
END_RCPP
}
// stop_music_stream_
void stop_music_stream_(Music music);
RcppExport SEXP _raylibr_stop_music_stream_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    stop_music_stream_(music);
    return R_NilValue;
END_RCPP
}
// pause_music_stream_
void pause_music_stream_(Music music);
RcppExport SEXP _raylibr_pause_music_stream_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    pause_music_stream_(music);
    return R_NilValue;
END_RCPP
}
// resume_music_stream_
void resume_music_stream_(Music music);
RcppExport SEXP _raylibr_resume_music_stream_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    resume_music_stream_(music);
    return R_NilValue;
END_RCPP
}
// seek_music_stream_
void seek_music_stream_(Music music, float position);
RcppExport SEXP _raylibr_seek_music_stream_(SEXP musicSEXP, SEXP positionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    Rcpp::traits::input_parameter< float >::type position(positionSEXP);
    seek_music_stream_(music, position);
    return R_NilValue;
END_RCPP
}
// set_music_volume_
void set_music_volume_(Music music, float volume);
RcppExport SEXP _raylibr_set_music_volume_(SEXP musicSEXP, SEXP volumeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    Rcpp::traits::input_parameter< float >::type volume(volumeSEXP);
    set_music_volume_(music, volume);
    return R_NilValue;
END_RCPP
}
// set_music_pitch_
void set_music_pitch_(Music music, float pitch);
RcppExport SEXP _raylibr_set_music_pitch_(SEXP musicSEXP, SEXP pitchSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    Rcpp::traits::input_parameter< float >::type pitch(pitchSEXP);
    set_music_pitch_(music, pitch);
    return R_NilValue;
END_RCPP
}
// get_music_time_length_
float get_music_time_length_(Music music);
RcppExport SEXP _raylibr_get_music_time_length_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    rcpp_result_gen = Rcpp::wrap(get_music_time_length_(music));
    return rcpp_result_gen;
END_RCPP
}
// get_music_time_played_
float get_music_time_played_(Music music);
RcppExport SEXP _raylibr_get_music_time_played_(SEXP musicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Music >::type music(musicSEXP);
    rcpp_result_gen = Rcpp::wrap(get_music_time_played_(music));
    return rcpp_result_gen;
END_RCPP
}
// vector_2_angle_
float vector_2_angle_(Vector2 v_1, Vector2 v_2);
RcppExport SEXP _raylibr_vector_2_angle_(SEXP v_1SEXP, SEXP v_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type v_1(v_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type v_2(v_2SEXP);
    rcpp_result_gen = Rcpp::wrap(vector_2_angle_(v_1, v_2));
    return rcpp_result_gen;
END_RCPP
}
// vector_2_move_towards_
Vector2 vector_2_move_towards_(Vector2 v, Vector2 target, float max_distance);
RcppExport SEXP _raylibr_vector_2_move_towards_(SEXP vSEXP, SEXP targetSEXP, SEXP max_distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type v(vSEXP);
    Rcpp::traits::input_parameter< Vector2 >::type target(targetSEXP);
    Rcpp::traits::input_parameter< float >::type max_distance(max_distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_2_move_towards_(v, target, max_distance));
    return rcpp_result_gen;
END_RCPP
}
// vector_2_distance_
float vector_2_distance_(Vector2 v_1, Vector2 v_2);
RcppExport SEXP _raylibr_vector_2_distance_(SEXP v_1SEXP, SEXP v_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type v_1(v_1SEXP);
    Rcpp::traits::input_parameter< Vector2 >::type v_2(v_2SEXP);
    rcpp_result_gen = Rcpp::wrap(vector_2_distance_(v_1, v_2));
    return rcpp_result_gen;
END_RCPP
}
// vector_2_rotate_
Vector2 vector_2_rotate_(Vector2 v, float angle);
RcppExport SEXP _raylibr_vector_2_rotate_(SEXP vSEXP, SEXP angleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector2 >::type v(vSEXP);
    Rcpp::traits::input_parameter< float >::type angle(angleSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_2_rotate_(v, angle));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_
GlyphInfo glyph_info_(int value, int offset_x, int offset_y, int advance_x, Image image);
RcppExport SEXP _raylibr_glyph_info_(SEXP valueSEXP, SEXP offset_xSEXP, SEXP offset_ySEXP, SEXP advance_xSEXP, SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type offset_x(offset_xSEXP);
    Rcpp::traits::input_parameter< int >::type offset_y(offset_ySEXP);
    Rcpp::traits::input_parameter< int >::type advance_x(advance_xSEXP);
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_(value, offset_x, offset_y, advance_x, image));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_get_value_
int glyph_info_get_value_(GlyphInfo obj);
RcppExport SEXP _raylibr_glyph_info_get_value_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_get_value_(obj));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_set_value_
GlyphInfo glyph_info_set_value_(GlyphInfo obj, int value);
RcppExport SEXP _raylibr_glyph_info_set_value_(SEXP objSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_set_value_(obj, value));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_get_offset_x_
int glyph_info_get_offset_x_(GlyphInfo obj);
RcppExport SEXP _raylibr_glyph_info_get_offset_x_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_get_offset_x_(obj));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_set_offset_x_
GlyphInfo glyph_info_set_offset_x_(GlyphInfo obj, int offset_x);
RcppExport SEXP _raylibr_glyph_info_set_offset_x_(SEXP objSEXP, SEXP offset_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type offset_x(offset_xSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_set_offset_x_(obj, offset_x));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_get_offset_y_
int glyph_info_get_offset_y_(GlyphInfo obj);
RcppExport SEXP _raylibr_glyph_info_get_offset_y_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_get_offset_y_(obj));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_set_offset_y_
GlyphInfo glyph_info_set_offset_y_(GlyphInfo obj, int offset_y);
RcppExport SEXP _raylibr_glyph_info_set_offset_y_(SEXP objSEXP, SEXP offset_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type offset_y(offset_ySEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_set_offset_y_(obj, offset_y));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_get_advance_x_
int glyph_info_get_advance_x_(GlyphInfo obj);
RcppExport SEXP _raylibr_glyph_info_get_advance_x_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_get_advance_x_(obj));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_set_advance_x_
GlyphInfo glyph_info_set_advance_x_(GlyphInfo obj, int advance_x);
RcppExport SEXP _raylibr_glyph_info_set_advance_x_(SEXP objSEXP, SEXP advance_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type advance_x(advance_xSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_set_advance_x_(obj, advance_x));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_get_image_
Image glyph_info_get_image_(GlyphInfo obj);
RcppExport SEXP _raylibr_glyph_info_get_image_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_get_image_(obj));
    return rcpp_result_gen;
END_RCPP
}
// glyph_info_set_image_
GlyphInfo glyph_info_set_image_(GlyphInfo obj, Image image);
RcppExport SEXP _raylibr_glyph_info_set_image_(SEXP objSEXP, SEXP imageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< GlyphInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Image >::type image(imageSEXP);
    rcpp_result_gen = Rcpp::wrap(glyph_info_set_image_(obj, image));
    return rcpp_result_gen;
END_RCPP
}
// material_map_
MaterialMap material_map_(Texture texture, Color color, float value);
RcppExport SEXP _raylibr_material_map_(SEXP textureSEXP, SEXP colorSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    Rcpp::traits::input_parameter< float >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_(texture, color, value));
    return rcpp_result_gen;
END_RCPP
}
// material_map_get_texture_
Texture material_map_get_texture_(MaterialMap obj);
RcppExport SEXP _raylibr_material_map_get_texture_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MaterialMap >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_get_texture_(obj));
    return rcpp_result_gen;
END_RCPP
}
// material_map_set_texture_
MaterialMap material_map_set_texture_(MaterialMap obj, Texture texture);
RcppExport SEXP _raylibr_material_map_set_texture_(SEXP objSEXP, SEXP textureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MaterialMap >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_set_texture_(obj, texture));
    return rcpp_result_gen;
END_RCPP
}
// material_map_get_color_
Color material_map_get_color_(MaterialMap obj);
RcppExport SEXP _raylibr_material_map_get_color_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MaterialMap >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_get_color_(obj));
    return rcpp_result_gen;
END_RCPP
}
// material_map_set_color_
MaterialMap material_map_set_color_(MaterialMap obj, Color color);
RcppExport SEXP _raylibr_material_map_set_color_(SEXP objSEXP, SEXP colorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MaterialMap >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Color >::type color(colorSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_set_color_(obj, color));
    return rcpp_result_gen;
END_RCPP
}
// material_map_get_value_
float material_map_get_value_(MaterialMap obj);
RcppExport SEXP _raylibr_material_map_get_value_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MaterialMap >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_get_value_(obj));
    return rcpp_result_gen;
END_RCPP
}
// material_map_set_value_
MaterialMap material_map_set_value_(MaterialMap obj, float value);
RcppExport SEXP _raylibr_material_map_set_value_(SEXP objSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< MaterialMap >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type value(valueSEXP);
    rcpp_result_gen = Rcpp::wrap(material_map_set_value_(obj, value));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_
NPatchInfo npatch_info_(Rectangle source, int left, int top, int right, int bottom, int layout);
RcppExport SEXP _raylibr_npatch_info_(SEXP sourceSEXP, SEXP leftSEXP, SEXP topSEXP, SEXP rightSEXP, SEXP bottomSEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< int >::type left(leftSEXP);
    Rcpp::traits::input_parameter< int >::type top(topSEXP);
    Rcpp::traits::input_parameter< int >::type right(rightSEXP);
    Rcpp::traits::input_parameter< int >::type bottom(bottomSEXP);
    Rcpp::traits::input_parameter< int >::type layout(layoutSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_(source, left, top, right, bottom, layout));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_get_source_
Rectangle npatch_info_get_source_(NPatchInfo obj);
RcppExport SEXP _raylibr_npatch_info_get_source_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_get_source_(obj));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_set_source_
NPatchInfo npatch_info_set_source_(NPatchInfo obj, Rectangle source);
RcppExport SEXP _raylibr_npatch_info_set_source_(SEXP objSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Rectangle >::type source(sourceSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_set_source_(obj, source));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_get_left_
int npatch_info_get_left_(NPatchInfo obj);
RcppExport SEXP _raylibr_npatch_info_get_left_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_get_left_(obj));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_set_left_
NPatchInfo npatch_info_set_left_(NPatchInfo obj, int left);
RcppExport SEXP _raylibr_npatch_info_set_left_(SEXP objSEXP, SEXP leftSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type left(leftSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_set_left_(obj, left));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_get_top_
int npatch_info_get_top_(NPatchInfo obj);
RcppExport SEXP _raylibr_npatch_info_get_top_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_get_top_(obj));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_set_top_
NPatchInfo npatch_info_set_top_(NPatchInfo obj, int top);
RcppExport SEXP _raylibr_npatch_info_set_top_(SEXP objSEXP, SEXP topSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type top(topSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_set_top_(obj, top));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_get_right_
int npatch_info_get_right_(NPatchInfo obj);
RcppExport SEXP _raylibr_npatch_info_get_right_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_get_right_(obj));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_set_right_
NPatchInfo npatch_info_set_right_(NPatchInfo obj, int right);
RcppExport SEXP _raylibr_npatch_info_set_right_(SEXP objSEXP, SEXP rightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type right(rightSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_set_right_(obj, right));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_get_bottom_
int npatch_info_get_bottom_(NPatchInfo obj);
RcppExport SEXP _raylibr_npatch_info_get_bottom_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_get_bottom_(obj));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_set_bottom_
NPatchInfo npatch_info_set_bottom_(NPatchInfo obj, int bottom);
RcppExport SEXP _raylibr_npatch_info_set_bottom_(SEXP objSEXP, SEXP bottomSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type bottom(bottomSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_set_bottom_(obj, bottom));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_get_layout_
int npatch_info_get_layout_(NPatchInfo obj);
RcppExport SEXP _raylibr_npatch_info_get_layout_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_get_layout_(obj));
    return rcpp_result_gen;
END_RCPP
}
// npatch_info_set_layout_
NPatchInfo npatch_info_set_layout_(NPatchInfo obj, int layout);
RcppExport SEXP _raylibr_npatch_info_set_layout_(SEXP objSEXP, SEXP layoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NPatchInfo >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type layout(layoutSEXP);
    rcpp_result_gen = Rcpp::wrap(npatch_info_set_layout_(obj, layout));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_
RayCollision ray_collision_(bool hit, float distance, Vector3 point, Vector3 normal);
RcppExport SEXP _raylibr_ray_collision_(SEXP hitSEXP, SEXP distanceSEXP, SEXP pointSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type hit(hitSEXP);
    Rcpp::traits::input_parameter< float >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type point(pointSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_(hit, distance, point, normal));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_get_hit_
bool ray_collision_get_hit_(RayCollision obj);
RcppExport SEXP _raylibr_ray_collision_get_hit_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_get_hit_(obj));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_set_hit_
RayCollision ray_collision_set_hit_(RayCollision obj, bool hit);
RcppExport SEXP _raylibr_ray_collision_set_hit_(SEXP objSEXP, SEXP hitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    Rcpp::traits::input_parameter< bool >::type hit(hitSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_set_hit_(obj, hit));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_get_distance_
float ray_collision_get_distance_(RayCollision obj);
RcppExport SEXP _raylibr_ray_collision_get_distance_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_get_distance_(obj));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_set_distance_
RayCollision ray_collision_set_distance_(RayCollision obj, float distance);
RcppExport SEXP _raylibr_ray_collision_set_distance_(SEXP objSEXP, SEXP distanceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type distance(distanceSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_set_distance_(obj, distance));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_get_point_
Vector3 ray_collision_get_point_(RayCollision obj);
RcppExport SEXP _raylibr_ray_collision_get_point_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_get_point_(obj));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_set_point_
RayCollision ray_collision_set_point_(RayCollision obj, Vector3 point);
RcppExport SEXP _raylibr_ray_collision_set_point_(SEXP objSEXP, SEXP pointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type point(pointSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_set_point_(obj, point));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_get_normal_
Vector3 ray_collision_get_normal_(RayCollision obj);
RcppExport SEXP _raylibr_ray_collision_get_normal_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_get_normal_(obj));
    return rcpp_result_gen;
END_RCPP
}
// ray_collision_set_normal_
RayCollision ray_collision_set_normal_(RayCollision obj, Vector3 normal);
RcppExport SEXP _raylibr_ray_collision_set_normal_(SEXP objSEXP, SEXP normalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RayCollision >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type normal(normalSEXP);
    rcpp_result_gen = Rcpp::wrap(ray_collision_set_normal_(obj, normal));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_
Rectangle rectangle_(float x, float y, float width, float height);
RcppExport SEXP _raylibr_rectangle_(SEXP xSEXP, SEXP ySEXP, SEXP widthSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type y(ySEXP);
    Rcpp::traits::input_parameter< float >::type width(widthSEXP);
    Rcpp::traits::input_parameter< float >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_(x, y, width, height));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_get_x_
float rectangle_get_x_(Rectangle obj);
RcppExport SEXP _raylibr_rectangle_get_x_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_get_x_(obj));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_set_x_
Rectangle rectangle_set_x_(Rectangle obj, float x);
RcppExport SEXP _raylibr_rectangle_set_x_(SEXP objSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_set_x_(obj, x));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_get_y_
float rectangle_get_y_(Rectangle obj);
RcppExport SEXP _raylibr_rectangle_get_y_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_get_y_(obj));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_set_y_
Rectangle rectangle_set_y_(Rectangle obj, float y);
RcppExport SEXP _raylibr_rectangle_set_y_(SEXP objSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_set_y_(obj, y));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_get_width_
float rectangle_get_width_(Rectangle obj);
RcppExport SEXP _raylibr_rectangle_get_width_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_get_width_(obj));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_set_width_
Rectangle rectangle_set_width_(Rectangle obj, float width);
RcppExport SEXP _raylibr_rectangle_set_width_(SEXP objSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_set_width_(obj, width));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_get_height_
float rectangle_get_height_(Rectangle obj);
RcppExport SEXP _raylibr_rectangle_get_height_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_get_height_(obj));
    return rcpp_result_gen;
END_RCPP
}
// rectangle_set_height_
Rectangle rectangle_set_height_(Rectangle obj, float height);
RcppExport SEXP _raylibr_rectangle_set_height_(SEXP objSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rectangle >::type obj(objSEXP);
    Rcpp::traits::input_parameter< float >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(rectangle_set_height_(obj, height));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_
RenderTexture render_texture_(unsigned int id, Texture texture, Texture depth);
RcppExport SEXP _raylibr_render_texture_(SEXP idSEXP, SEXP textureSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type id(idSEXP);
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    Rcpp::traits::input_parameter< Texture >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_(id, texture, depth));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_get_id_
unsigned int render_texture_get_id_(RenderTexture obj);
RcppExport SEXP _raylibr_render_texture_get_id_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RenderTexture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_get_id_(obj));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_set_id_
RenderTexture render_texture_set_id_(RenderTexture obj, unsigned int id);
RcppExport SEXP _raylibr_render_texture_set_id_(SEXP objSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RenderTexture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_set_id_(obj, id));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_get_texture_
Texture render_texture_get_texture_(RenderTexture obj);
RcppExport SEXP _raylibr_render_texture_get_texture_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RenderTexture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_get_texture_(obj));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_set_texture_
RenderTexture render_texture_set_texture_(RenderTexture obj, Texture texture);
RcppExport SEXP _raylibr_render_texture_set_texture_(SEXP objSEXP, SEXP textureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RenderTexture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Texture >::type texture(textureSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_set_texture_(obj, texture));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_get_depth_
Texture render_texture_get_depth_(RenderTexture obj);
RcppExport SEXP _raylibr_render_texture_get_depth_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RenderTexture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_get_depth_(obj));
    return rcpp_result_gen;
END_RCPP
}
// render_texture_set_depth_
RenderTexture render_texture_set_depth_(RenderTexture obj, Texture depth);
RcppExport SEXP _raylibr_render_texture_set_depth_(SEXP objSEXP, SEXP depthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< RenderTexture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Texture >::type depth(depthSEXP);
    rcpp_result_gen = Rcpp::wrap(render_texture_set_depth_(obj, depth));
    return rcpp_result_gen;
END_RCPP
}
// sound_
Sound sound_(AudioStream stream, unsigned int frame_count);
RcppExport SEXP _raylibr_sound_(SEXP streamSEXP, SEXP frame_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< AudioStream >::type stream(streamSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type frame_count(frame_countSEXP);
    rcpp_result_gen = Rcpp::wrap(sound_(stream, frame_count));
    return rcpp_result_gen;
END_RCPP
}
// sound_get_stream_
AudioStream sound_get_stream_(Sound obj);
RcppExport SEXP _raylibr_sound_get_stream_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(sound_get_stream_(obj));
    return rcpp_result_gen;
END_RCPP
}
// sound_set_stream_
Sound sound_set_stream_(Sound obj, AudioStream stream);
RcppExport SEXP _raylibr_sound_set_stream_(SEXP objSEXP, SEXP streamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type obj(objSEXP);
    Rcpp::traits::input_parameter< AudioStream >::type stream(streamSEXP);
    rcpp_result_gen = Rcpp::wrap(sound_set_stream_(obj, stream));
    return rcpp_result_gen;
END_RCPP
}
// sound_get_frame_count_
unsigned int sound_get_frame_count_(Sound obj);
RcppExport SEXP _raylibr_sound_get_frame_count_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(sound_get_frame_count_(obj));
    return rcpp_result_gen;
END_RCPP
}
// sound_set_frame_count_
Sound sound_set_frame_count_(Sound obj, unsigned int frame_count);
RcppExport SEXP _raylibr_sound_set_frame_count_(SEXP objSEXP, SEXP frame_countSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Sound >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type frame_count(frame_countSEXP);
    rcpp_result_gen = Rcpp::wrap(sound_set_frame_count_(obj, frame_count));
    return rcpp_result_gen;
END_RCPP
}
// texture_
Texture texture_(unsigned int id, int width, int height, int mipmaps, int format);
RcppExport SEXP _raylibr_texture_(SEXP idSEXP, SEXP widthSEXP, SEXP heightSEXP, SEXP mipmapsSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    Rcpp::traits::input_parameter< int >::type mipmaps(mipmapsSEXP);
    Rcpp::traits::input_parameter< int >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_(id, width, height, mipmaps, format));
    return rcpp_result_gen;
END_RCPP
}
// texture_get_id_
unsigned int texture_get_id_(Texture obj);
RcppExport SEXP _raylibr_texture_get_id_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_get_id_(obj));
    return rcpp_result_gen;
END_RCPP
}
// texture_set_id_
Texture texture_set_id_(Texture obj, unsigned int id);
RcppExport SEXP _raylibr_texture_set_id_(SEXP objSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type id(idSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_set_id_(obj, id));
    return rcpp_result_gen;
END_RCPP
}
// texture_get_width_
int texture_get_width_(Texture obj);
RcppExport SEXP _raylibr_texture_get_width_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_get_width_(obj));
    return rcpp_result_gen;
END_RCPP
}
// texture_set_width_
Texture texture_set_width_(Texture obj, int width);
RcppExport SEXP _raylibr_texture_set_width_(SEXP objSEXP, SEXP widthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type width(widthSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_set_width_(obj, width));
    return rcpp_result_gen;
END_RCPP
}
// texture_get_height_
int texture_get_height_(Texture obj);
RcppExport SEXP _raylibr_texture_get_height_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_get_height_(obj));
    return rcpp_result_gen;
END_RCPP
}
// texture_set_height_
Texture texture_set_height_(Texture obj, int height);
RcppExport SEXP _raylibr_texture_set_height_(SEXP objSEXP, SEXP heightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type height(heightSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_set_height_(obj, height));
    return rcpp_result_gen;
END_RCPP
}
// texture_get_mipmaps_
int texture_get_mipmaps_(Texture obj);
RcppExport SEXP _raylibr_texture_get_mipmaps_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_get_mipmaps_(obj));
    return rcpp_result_gen;
END_RCPP
}
// texture_set_mipmaps_
Texture texture_set_mipmaps_(Texture obj, int mipmaps);
RcppExport SEXP _raylibr_texture_set_mipmaps_(SEXP objSEXP, SEXP mipmapsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type mipmaps(mipmapsSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_set_mipmaps_(obj, mipmaps));
    return rcpp_result_gen;
END_RCPP
}
// texture_get_format_
int texture_get_format_(Texture obj);
RcppExport SEXP _raylibr_texture_get_format_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_get_format_(obj));
    return rcpp_result_gen;
END_RCPP
}
// texture_set_format_
Texture texture_set_format_(Texture obj, int format);
RcppExport SEXP _raylibr_texture_set_format_(SEXP objSEXP, SEXP formatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Texture >::type obj(objSEXP);
    Rcpp::traits::input_parameter< int >::type format(formatSEXP);
    rcpp_result_gen = Rcpp::wrap(texture_set_format_(obj, format));
    return rcpp_result_gen;
END_RCPP
}
// transform_
Transform transform_(Vector3 translation, Vector4 rotation, Vector3 scale);
RcppExport SEXP _raylibr_transform_(SEXP translationSEXP, SEXP rotationSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Vector3 >::type translation(translationSEXP);
    Rcpp::traits::input_parameter< Vector4 >::type rotation(rotationSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_(translation, rotation, scale));
    return rcpp_result_gen;
END_RCPP
}
// transform_get_translation_
Vector3 transform_get_translation_(Transform obj);
RcppExport SEXP _raylibr_transform_get_translation_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Transform >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_get_translation_(obj));
    return rcpp_result_gen;
END_RCPP
}
// transform_set_translation_
Transform transform_set_translation_(Transform obj, Vector3 translation);
RcppExport SEXP _raylibr_transform_set_translation_(SEXP objSEXP, SEXP translationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Transform >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type translation(translationSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_set_translation_(obj, translation));
    return rcpp_result_gen;
END_RCPP
}
// transform_get_rotation_
Vector4 transform_get_rotation_(Transform obj);
RcppExport SEXP _raylibr_transform_get_rotation_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Transform >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_get_rotation_(obj));
    return rcpp_result_gen;
END_RCPP
}
// transform_set_rotation_
Transform transform_set_rotation_(Transform obj, Vector4 rotation);
RcppExport SEXP _raylibr_transform_set_rotation_(SEXP objSEXP, SEXP rotationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Transform >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector4 >::type rotation(rotationSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_set_rotation_(obj, rotation));
    return rcpp_result_gen;
END_RCPP
}
// transform_get_scale_
Vector3 transform_get_scale_(Transform obj);
RcppExport SEXP _raylibr_transform_get_scale_(SEXP objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Transform >::type obj(objSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_get_scale_(obj));
    return rcpp_result_gen;
END_RCPP
}
// transform_set_scale_
Transform transform_set_scale_(Transform obj, Vector3 scale);
RcppExport SEXP _raylibr_transform_set_scale_(SEXP objSEXP, SEXP scaleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Transform >::type obj(objSEXP);
    Rcpp::traits::input_parameter< Vector3 >::type scale(scaleSEXP);
    rcpp_result_gen = Rcpp::wrap(transform_set_scale_(obj, scale));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_raylibr_bounding_box_", (DL_FUNC) &_raylibr_bounding_box_, 2},
    {"_raylibr_bounding_box_get_min_", (DL_FUNC) &_raylibr_bounding_box_get_min_, 1},
    {"_raylibr_bounding_box_set_min_", (DL_FUNC) &_raylibr_bounding_box_set_min_, 2},
    {"_raylibr_bounding_box_get_max_", (DL_FUNC) &_raylibr_bounding_box_get_max_, 1},
    {"_raylibr_bounding_box_set_max_", (DL_FUNC) &_raylibr_bounding_box_set_max_, 2},
    {"_raylibr_camera_2d_", (DL_FUNC) &_raylibr_camera_2d_, 4},
    {"_raylibr_camera_2d_get_offset_", (DL_FUNC) &_raylibr_camera_2d_get_offset_, 1},
    {"_raylibr_camera_2d_set_offset_", (DL_FUNC) &_raylibr_camera_2d_set_offset_, 2},
    {"_raylibr_camera_2d_get_target_", (DL_FUNC) &_raylibr_camera_2d_get_target_, 1},
    {"_raylibr_camera_2d_set_target_", (DL_FUNC) &_raylibr_camera_2d_set_target_, 2},
    {"_raylibr_camera_2d_get_rotation_", (DL_FUNC) &_raylibr_camera_2d_get_rotation_, 1},
    {"_raylibr_camera_2d_set_rotation_", (DL_FUNC) &_raylibr_camera_2d_set_rotation_, 2},
    {"_raylibr_camera_2d_get_zoom_", (DL_FUNC) &_raylibr_camera_2d_get_zoom_, 1},
    {"_raylibr_camera_2d_set_zoom_", (DL_FUNC) &_raylibr_camera_2d_set_zoom_, 2},
    {"_raylibr_camera_3d_", (DL_FUNC) &_raylibr_camera_3d_, 5},
    {"_raylibr_camera_3d_get_position_", (DL_FUNC) &_raylibr_camera_3d_get_position_, 1},
    {"_raylibr_camera_3d_set_position_", (DL_FUNC) &_raylibr_camera_3d_set_position_, 2},
    {"_raylibr_camera_3d_get_target_", (DL_FUNC) &_raylibr_camera_3d_get_target_, 1},
    {"_raylibr_camera_3d_set_target_", (DL_FUNC) &_raylibr_camera_3d_set_target_, 2},
    {"_raylibr_camera_3d_get_up_", (DL_FUNC) &_raylibr_camera_3d_get_up_, 1},
    {"_raylibr_camera_3d_set_up_", (DL_FUNC) &_raylibr_camera_3d_set_up_, 2},
    {"_raylibr_camera_3d_get_fovy_", (DL_FUNC) &_raylibr_camera_3d_get_fovy_, 1},
    {"_raylibr_camera_3d_set_fovy_", (DL_FUNC) &_raylibr_camera_3d_set_fovy_, 2},
    {"_raylibr_camera_3d_get_projection_", (DL_FUNC) &_raylibr_camera_3d_get_projection_, 1},
    {"_raylibr_camera_3d_set_projection_", (DL_FUNC) &_raylibr_camera_3d_set_projection_, 2},
    {"_raylibr_as_color", (DL_FUNC) &_raylibr_as_color, 1},
    {"_raylibr_draw_circles", (DL_FUNC) &_raylibr_draw_circles, 4},
    {"_raylibr_load_font_ex", (DL_FUNC) &_raylibr_load_font_ex, 2},
    {"_raylibr_image_draw_pixel", (DL_FUNC) &_raylibr_image_draw_pixel, 4},
    {"_raylibr_color_", (DL_FUNC) &_raylibr_color_, 4},
    {"_raylibr_color_get_r_", (DL_FUNC) &_raylibr_color_get_r_, 1},
    {"_raylibr_color_set_r_", (DL_FUNC) &_raylibr_color_set_r_, 2},
    {"_raylibr_color_get_g_", (DL_FUNC) &_raylibr_color_get_g_, 1},
    {"_raylibr_color_set_g_", (DL_FUNC) &_raylibr_color_set_g_, 2},
    {"_raylibr_color_get_b_", (DL_FUNC) &_raylibr_color_get_b_, 1},
    {"_raylibr_color_set_b_", (DL_FUNC) &_raylibr_color_set_b_, 2},
    {"_raylibr_color_get_a_", (DL_FUNC) &_raylibr_color_get_a_, 1},
    {"_raylibr_color_set_a_", (DL_FUNC) &_raylibr_color_set_a_, 2},
    {"_raylibr_init_window_", (DL_FUNC) &_raylibr_init_window_, 3},
    {"_raylibr_window_should_close_", (DL_FUNC) &_raylibr_window_should_close_, 0},
    {"_raylibr_close_window_", (DL_FUNC) &_raylibr_close_window_, 0},
    {"_raylibr_is_window_ready_", (DL_FUNC) &_raylibr_is_window_ready_, 0},
    {"_raylibr_is_window_fullscreen_", (DL_FUNC) &_raylibr_is_window_fullscreen_, 0},
    {"_raylibr_is_window_hidden_", (DL_FUNC) &_raylibr_is_window_hidden_, 0},
    {"_raylibr_is_window_minimized_", (DL_FUNC) &_raylibr_is_window_minimized_, 0},
    {"_raylibr_is_window_maximized_", (DL_FUNC) &_raylibr_is_window_maximized_, 0},
    {"_raylibr_is_window_focused_", (DL_FUNC) &_raylibr_is_window_focused_, 0},
    {"_raylibr_is_window_resized_", (DL_FUNC) &_raylibr_is_window_resized_, 0},
    {"_raylibr_is_window_state_", (DL_FUNC) &_raylibr_is_window_state_, 1},
    {"_raylibr_set_window_state_", (DL_FUNC) &_raylibr_set_window_state_, 1},
    {"_raylibr_clear_window_state_", (DL_FUNC) &_raylibr_clear_window_state_, 1},
    {"_raylibr_toggle_fullscreen_", (DL_FUNC) &_raylibr_toggle_fullscreen_, 0},
    {"_raylibr_maximize_window_", (DL_FUNC) &_raylibr_maximize_window_, 0},
    {"_raylibr_minimize_window_", (DL_FUNC) &_raylibr_minimize_window_, 0},
    {"_raylibr_restore_window_", (DL_FUNC) &_raylibr_restore_window_, 0},
    {"_raylibr_set_window_icon_", (DL_FUNC) &_raylibr_set_window_icon_, 1},
    {"_raylibr_set_window_title_", (DL_FUNC) &_raylibr_set_window_title_, 1},
    {"_raylibr_set_window_position_", (DL_FUNC) &_raylibr_set_window_position_, 2},
    {"_raylibr_set_window_monitor_", (DL_FUNC) &_raylibr_set_window_monitor_, 1},
    {"_raylibr_set_window_min_size_", (DL_FUNC) &_raylibr_set_window_min_size_, 2},
    {"_raylibr_set_window_size_", (DL_FUNC) &_raylibr_set_window_size_, 2},
    {"_raylibr_get_screen_width_", (DL_FUNC) &_raylibr_get_screen_width_, 0},
    {"_raylibr_get_screen_height_", (DL_FUNC) &_raylibr_get_screen_height_, 0},
    {"_raylibr_get_monitor_count_", (DL_FUNC) &_raylibr_get_monitor_count_, 0},
    {"_raylibr_get_current_monitor_", (DL_FUNC) &_raylibr_get_current_monitor_, 0},
    {"_raylibr_get_monitor_position_", (DL_FUNC) &_raylibr_get_monitor_position_, 1},
    {"_raylibr_get_monitor_width_", (DL_FUNC) &_raylibr_get_monitor_width_, 1},
    {"_raylibr_get_monitor_height_", (DL_FUNC) &_raylibr_get_monitor_height_, 1},
    {"_raylibr_get_monitor_physical_width_", (DL_FUNC) &_raylibr_get_monitor_physical_width_, 1},
    {"_raylibr_get_monitor_physical_height_", (DL_FUNC) &_raylibr_get_monitor_physical_height_, 1},
    {"_raylibr_get_monitor_refresh_rate_", (DL_FUNC) &_raylibr_get_monitor_refresh_rate_, 1},
    {"_raylibr_get_window_position_", (DL_FUNC) &_raylibr_get_window_position_, 0},
    {"_raylibr_get_window_scale_dpi_", (DL_FUNC) &_raylibr_get_window_scale_dpi_, 0},
    {"_raylibr_get_monitor_name_", (DL_FUNC) &_raylibr_get_monitor_name_, 1},
    {"_raylibr_show_cursor_", (DL_FUNC) &_raylibr_show_cursor_, 0},
    {"_raylibr_hide_cursor_", (DL_FUNC) &_raylibr_hide_cursor_, 0},
    {"_raylibr_is_cursor_hidden_", (DL_FUNC) &_raylibr_is_cursor_hidden_, 0},
    {"_raylibr_enable_cursor_", (DL_FUNC) &_raylibr_enable_cursor_, 0},
    {"_raylibr_disable_cursor_", (DL_FUNC) &_raylibr_disable_cursor_, 0},
    {"_raylibr_is_cursor_on_screen_", (DL_FUNC) &_raylibr_is_cursor_on_screen_, 0},
    {"_raylibr_clear_background_", (DL_FUNC) &_raylibr_clear_background_, 1},
    {"_raylibr_begin_drawing_", (DL_FUNC) &_raylibr_begin_drawing_, 0},
    {"_raylibr_end_drawing_", (DL_FUNC) &_raylibr_end_drawing_, 0},
    {"_raylibr_begin_mode_2d_", (DL_FUNC) &_raylibr_begin_mode_2d_, 1},
    {"_raylibr_end_mode_2d_", (DL_FUNC) &_raylibr_end_mode_2d_, 0},
    {"_raylibr_begin_mode_3d_", (DL_FUNC) &_raylibr_begin_mode_3d_, 1},
    {"_raylibr_end_mode_3d_", (DL_FUNC) &_raylibr_end_mode_3d_, 0},
    {"_raylibr_get_camera_matrix_", (DL_FUNC) &_raylibr_get_camera_matrix_, 1},
    {"_raylibr_get_camera_matrix_2d_", (DL_FUNC) &_raylibr_get_camera_matrix_2d_, 1},
    {"_raylibr_get_world_to_screen_", (DL_FUNC) &_raylibr_get_world_to_screen_, 2},
    {"_raylibr_get_world_to_screen_ex_", (DL_FUNC) &_raylibr_get_world_to_screen_ex_, 4},
    {"_raylibr_get_world_to_screen_2d_", (DL_FUNC) &_raylibr_get_world_to_screen_2d_, 2},
    {"_raylibr_get_screen_to_world_2d_", (DL_FUNC) &_raylibr_get_screen_to_world_2d_, 2},
    {"_raylibr_set_target_fps_", (DL_FUNC) &_raylibr_set_target_fps_, 1},
    {"_raylibr_get_fps_", (DL_FUNC) &_raylibr_get_fps_, 0},
    {"_raylibr_get_frame_time_", (DL_FUNC) &_raylibr_get_frame_time_, 0},
    {"_raylibr_get_time_", (DL_FUNC) &_raylibr_get_time_, 0},
    {"_raylibr_get_random_value_", (DL_FUNC) &_raylibr_get_random_value_, 2},
    {"_raylibr_take_screenshot_", (DL_FUNC) &_raylibr_take_screenshot_, 1},
    {"_raylibr_is_key_pressed_", (DL_FUNC) &_raylibr_is_key_pressed_, 1},
    {"_raylibr_is_key_down_", (DL_FUNC) &_raylibr_is_key_down_, 1},
    {"_raylibr_is_key_released_", (DL_FUNC) &_raylibr_is_key_released_, 1},
    {"_raylibr_is_key_up_", (DL_FUNC) &_raylibr_is_key_up_, 1},
    {"_raylibr_set_exit_key_", (DL_FUNC) &_raylibr_set_exit_key_, 1},
    {"_raylibr_get_key_pressed_", (DL_FUNC) &_raylibr_get_key_pressed_, 0},
    {"_raylibr_get_char_pressed_", (DL_FUNC) &_raylibr_get_char_pressed_, 0},
    {"_raylibr_is_mouse_button_pressed_", (DL_FUNC) &_raylibr_is_mouse_button_pressed_, 1},
    {"_raylibr_is_mouse_button_down_", (DL_FUNC) &_raylibr_is_mouse_button_down_, 1},
    {"_raylibr_is_mouse_button_released_", (DL_FUNC) &_raylibr_is_mouse_button_released_, 1},
    {"_raylibr_is_mouse_button_up_", (DL_FUNC) &_raylibr_is_mouse_button_up_, 1},
    {"_raylibr_get_mouse_x_", (DL_FUNC) &_raylibr_get_mouse_x_, 0},
    {"_raylibr_get_mouse_y_", (DL_FUNC) &_raylibr_get_mouse_y_, 0},
    {"_raylibr_get_mouse_position_", (DL_FUNC) &_raylibr_get_mouse_position_, 0},
    {"_raylibr_get_mouse_delta_", (DL_FUNC) &_raylibr_get_mouse_delta_, 0},
    {"_raylibr_set_mouse_position_", (DL_FUNC) &_raylibr_set_mouse_position_, 2},
    {"_raylibr_set_mouse_offset_", (DL_FUNC) &_raylibr_set_mouse_offset_, 2},
    {"_raylibr_set_mouse_scale_", (DL_FUNC) &_raylibr_set_mouse_scale_, 2},
    {"_raylibr_get_mouse_wheel_move_", (DL_FUNC) &_raylibr_get_mouse_wheel_move_, 0},
    {"_raylibr_set_mouse_cursor_", (DL_FUNC) &_raylibr_set_mouse_cursor_, 1},
    {"_raylibr_set_camera_pan_control_", (DL_FUNC) &_raylibr_set_camera_pan_control_, 1},
    {"_raylibr_set_camera_alt_control_", (DL_FUNC) &_raylibr_set_camera_alt_control_, 1},
    {"_raylibr_set_camera_smooth_zoom_control_", (DL_FUNC) &_raylibr_set_camera_smooth_zoom_control_, 1},
    {"_raylibr_set_camera_move_controls_", (DL_FUNC) &_raylibr_set_camera_move_controls_, 6},
    {"_raylibr_set_shapes_texture_", (DL_FUNC) &_raylibr_set_shapes_texture_, 2},
    {"_raylibr_draw_pixel_", (DL_FUNC) &_raylibr_draw_pixel_, 3},
    {"_raylibr_draw_pixel_v_", (DL_FUNC) &_raylibr_draw_pixel_v_, 2},
    {"_raylibr_draw_line_", (DL_FUNC) &_raylibr_draw_line_, 5},
    {"_raylibr_draw_line_v_", (DL_FUNC) &_raylibr_draw_line_v_, 3},
    {"_raylibr_draw_line_ex_", (DL_FUNC) &_raylibr_draw_line_ex_, 4},
    {"_raylibr_draw_line_bezier_", (DL_FUNC) &_raylibr_draw_line_bezier_, 4},
    {"_raylibr_draw_line_bezier_quad_", (DL_FUNC) &_raylibr_draw_line_bezier_quad_, 5},
    {"_raylibr_draw_line_bezier_cubic_", (DL_FUNC) &_raylibr_draw_line_bezier_cubic_, 6},
    {"_raylibr_draw_circle_", (DL_FUNC) &_raylibr_draw_circle_, 4},
    {"_raylibr_draw_circle_sector_", (DL_FUNC) &_raylibr_draw_circle_sector_, 6},
    {"_raylibr_draw_circle_sector_lines_", (DL_FUNC) &_raylibr_draw_circle_sector_lines_, 6},
    {"_raylibr_draw_circle_gradient_", (DL_FUNC) &_raylibr_draw_circle_gradient_, 5},
    {"_raylibr_draw_circle_v_", (DL_FUNC) &_raylibr_draw_circle_v_, 3},
    {"_raylibr_draw_circle_lines_", (DL_FUNC) &_raylibr_draw_circle_lines_, 4},
    {"_raylibr_draw_ellipse_", (DL_FUNC) &_raylibr_draw_ellipse_, 5},
    {"_raylibr_draw_ellipse_lines_", (DL_FUNC) &_raylibr_draw_ellipse_lines_, 5},
    {"_raylibr_draw_ring_", (DL_FUNC) &_raylibr_draw_ring_, 7},
    {"_raylibr_draw_ring_lines_", (DL_FUNC) &_raylibr_draw_ring_lines_, 7},
    {"_raylibr_draw_rectangle_", (DL_FUNC) &_raylibr_draw_rectangle_, 5},
    {"_raylibr_draw_rectangle_v_", (DL_FUNC) &_raylibr_draw_rectangle_v_, 3},
    {"_raylibr_draw_rectangle_rec_", (DL_FUNC) &_raylibr_draw_rectangle_rec_, 2},
    {"_raylibr_draw_rectangle_pro_", (DL_FUNC) &_raylibr_draw_rectangle_pro_, 4},
    {"_raylibr_draw_rectangle_gradient_v_", (DL_FUNC) &_raylibr_draw_rectangle_gradient_v_, 6},
    {"_raylibr_draw_rectangle_gradient_h_", (DL_FUNC) &_raylibr_draw_rectangle_gradient_h_, 6},
    {"_raylibr_draw_rectangle_gradient_ex_", (DL_FUNC) &_raylibr_draw_rectangle_gradient_ex_, 5},
    {"_raylibr_draw_rectangle_lines_", (DL_FUNC) &_raylibr_draw_rectangle_lines_, 5},
    {"_raylibr_draw_rectangle_lines_ex_", (DL_FUNC) &_raylibr_draw_rectangle_lines_ex_, 3},
    {"_raylibr_draw_rectangle_rounded_", (DL_FUNC) &_raylibr_draw_rectangle_rounded_, 4},
    {"_raylibr_draw_rectangle_rounded_lines_", (DL_FUNC) &_raylibr_draw_rectangle_rounded_lines_, 5},
    {"_raylibr_draw_triangle_", (DL_FUNC) &_raylibr_draw_triangle_, 4},
    {"_raylibr_draw_triangle_lines_", (DL_FUNC) &_raylibr_draw_triangle_lines_, 4},
    {"_raylibr_draw_poly_", (DL_FUNC) &_raylibr_draw_poly_, 5},
    {"_raylibr_draw_poly_lines_", (DL_FUNC) &_raylibr_draw_poly_lines_, 5},
    {"_raylibr_draw_poly_lines_ex_", (DL_FUNC) &_raylibr_draw_poly_lines_ex_, 6},
    {"_raylibr_check_collision_recs_", (DL_FUNC) &_raylibr_check_collision_recs_, 2},
    {"_raylibr_check_collision_circles_", (DL_FUNC) &_raylibr_check_collision_circles_, 4},
    {"_raylibr_check_collision_circle_rec_", (DL_FUNC) &_raylibr_check_collision_circle_rec_, 3},
    {"_raylibr_check_collision_point_rec_", (DL_FUNC) &_raylibr_check_collision_point_rec_, 2},
    {"_raylibr_check_collision_point_circle_", (DL_FUNC) &_raylibr_check_collision_point_circle_, 3},
    {"_raylibr_check_collision_point_triangle_", (DL_FUNC) &_raylibr_check_collision_point_triangle_, 4},
    {"_raylibr_check_collision_point_line_", (DL_FUNC) &_raylibr_check_collision_point_line_, 4},
    {"_raylibr_get_collision_rec_", (DL_FUNC) &_raylibr_get_collision_rec_, 2},
    {"_raylibr_load_image_", (DL_FUNC) &_raylibr_load_image_, 1},
    {"_raylibr_load_image_raw_", (DL_FUNC) &_raylibr_load_image_raw_, 5},
    {"_raylibr_load_image_from_texture_", (DL_FUNC) &_raylibr_load_image_from_texture_, 1},
    {"_raylibr_load_image_from_screen_", (DL_FUNC) &_raylibr_load_image_from_screen_, 0},
    {"_raylibr_unload_image_", (DL_FUNC) &_raylibr_unload_image_, 1},
    {"_raylibr_export_image_", (DL_FUNC) &_raylibr_export_image_, 2},
    {"_raylibr_export_image_as_code_", (DL_FUNC) &_raylibr_export_image_as_code_, 2},
    {"_raylibr_gen_image_color_", (DL_FUNC) &_raylibr_gen_image_color_, 3},
    {"_raylibr_gen_image_gradient_v_", (DL_FUNC) &_raylibr_gen_image_gradient_v_, 4},
    {"_raylibr_gen_image_gradient_h_", (DL_FUNC) &_raylibr_gen_image_gradient_h_, 4},
    {"_raylibr_gen_image_gradient_radial_", (DL_FUNC) &_raylibr_gen_image_gradient_radial_, 5},
    {"_raylibr_gen_image_checked_", (DL_FUNC) &_raylibr_gen_image_checked_, 6},
    {"_raylibr_gen_image_white_noise_", (DL_FUNC) &_raylibr_gen_image_white_noise_, 3},
    {"_raylibr_gen_image_cellular_", (DL_FUNC) &_raylibr_gen_image_cellular_, 3},
    {"_raylibr_get_image_alpha_border_", (DL_FUNC) &_raylibr_get_image_alpha_border_, 2},
    {"_raylibr_load_texture_", (DL_FUNC) &_raylibr_load_texture_, 1},
    {"_raylibr_load_texture_from_image_", (DL_FUNC) &_raylibr_load_texture_from_image_, 1},
    {"_raylibr_draw_texture_", (DL_FUNC) &_raylibr_draw_texture_, 4},
    {"_raylibr_fade_", (DL_FUNC) &_raylibr_fade_, 2},
    {"_raylibr_color_to_int_", (DL_FUNC) &_raylibr_color_to_int_, 1},
    {"_raylibr_color_normalize_", (DL_FUNC) &_raylibr_color_normalize_, 1},
    {"_raylibr_color_from_normalized_", (DL_FUNC) &_raylibr_color_from_normalized_, 1},
    {"_raylibr_color_to_hsv_", (DL_FUNC) &_raylibr_color_to_hsv_, 1},
    {"_raylibr_color_from_hsv_", (DL_FUNC) &_raylibr_color_from_hsv_, 3},
    {"_raylibr_color_alpha_", (DL_FUNC) &_raylibr_color_alpha_, 2},
    {"_raylibr_color_alpha_blend_", (DL_FUNC) &_raylibr_color_alpha_blend_, 3},
    {"_raylibr_get_color_", (DL_FUNC) &_raylibr_get_color_, 1},
    {"_raylibr_get_font_default_", (DL_FUNC) &_raylibr_get_font_default_, 0},
    {"_raylibr_load_font_", (DL_FUNC) &_raylibr_load_font_, 1},
    {"_raylibr_unload_font_", (DL_FUNC) &_raylibr_unload_font_, 1},
    {"_raylibr_draw_fps_", (DL_FUNC) &_raylibr_draw_fps_, 2},
    {"_raylibr_draw_text_", (DL_FUNC) &_raylibr_draw_text_, 5},
    {"_raylibr_draw_text_ex_", (DL_FUNC) &_raylibr_draw_text_ex_, 6},
    {"_raylibr_measure_text_", (DL_FUNC) &_raylibr_measure_text_, 2},
    {"_raylibr_measure_text_ex_", (DL_FUNC) &_raylibr_measure_text_ex_, 4},
    {"_raylibr_draw_cube_", (DL_FUNC) &_raylibr_draw_cube_, 5},
    {"_raylibr_draw_grid_", (DL_FUNC) &_raylibr_draw_grid_, 2},
    {"_raylibr_init_audio_device_", (DL_FUNC) &_raylibr_init_audio_device_, 0},
    {"_raylibr_close_audio_device_", (DL_FUNC) &_raylibr_close_audio_device_, 0},
    {"_raylibr_is_audio_device_ready_", (DL_FUNC) &_raylibr_is_audio_device_ready_, 0},
    {"_raylibr_set_master_volume_", (DL_FUNC) &_raylibr_set_master_volume_, 1},
    {"_raylibr_load_wave_", (DL_FUNC) &_raylibr_load_wave_, 1},
    {"_raylibr_load_sound_", (DL_FUNC) &_raylibr_load_sound_, 1},
    {"_raylibr_load_sound_from_wave_", (DL_FUNC) &_raylibr_load_sound_from_wave_, 1},
    {"_raylibr_unload_wave_", (DL_FUNC) &_raylibr_unload_wave_, 1},
    {"_raylibr_unload_sound_", (DL_FUNC) &_raylibr_unload_sound_, 1},
    {"_raylibr_play_sound_", (DL_FUNC) &_raylibr_play_sound_, 1},
    {"_raylibr_stop_sound_", (DL_FUNC) &_raylibr_stop_sound_, 1},
    {"_raylibr_pause_sound_", (DL_FUNC) &_raylibr_pause_sound_, 1},
    {"_raylibr_resume_sound_", (DL_FUNC) &_raylibr_resume_sound_, 1},
    {"_raylibr_play_sound_multi_", (DL_FUNC) &_raylibr_play_sound_multi_, 1},
    {"_raylibr_stop_sound_multi_", (DL_FUNC) &_raylibr_stop_sound_multi_, 0},
    {"_raylibr_get_sounds_playing_", (DL_FUNC) &_raylibr_get_sounds_playing_, 0},
    {"_raylibr_is_sound_playing_", (DL_FUNC) &_raylibr_is_sound_playing_, 1},
    {"_raylibr_set_sound_volume_", (DL_FUNC) &_raylibr_set_sound_volume_, 2},
    {"_raylibr_set_sound_pitch_", (DL_FUNC) &_raylibr_set_sound_pitch_, 2},
    {"_raylibr_load_music_stream_", (DL_FUNC) &_raylibr_load_music_stream_, 1},
    {"_raylibr_unload_music_stream_", (DL_FUNC) &_raylibr_unload_music_stream_, 1},
    {"_raylibr_play_music_stream_", (DL_FUNC) &_raylibr_play_music_stream_, 1},
    {"_raylibr_is_music_stream_playing_", (DL_FUNC) &_raylibr_is_music_stream_playing_, 1},
    {"_raylibr_update_music_stream_", (DL_FUNC) &_raylibr_update_music_stream_, 1},
    {"_raylibr_stop_music_stream_", (DL_FUNC) &_raylibr_stop_music_stream_, 1},
    {"_raylibr_pause_music_stream_", (DL_FUNC) &_raylibr_pause_music_stream_, 1},
    {"_raylibr_resume_music_stream_", (DL_FUNC) &_raylibr_resume_music_stream_, 1},
    {"_raylibr_seek_music_stream_", (DL_FUNC) &_raylibr_seek_music_stream_, 2},
    {"_raylibr_set_music_volume_", (DL_FUNC) &_raylibr_set_music_volume_, 2},
    {"_raylibr_set_music_pitch_", (DL_FUNC) &_raylibr_set_music_pitch_, 2},
    {"_raylibr_get_music_time_length_", (DL_FUNC) &_raylibr_get_music_time_length_, 1},
    {"_raylibr_get_music_time_played_", (DL_FUNC) &_raylibr_get_music_time_played_, 1},
    {"_raylibr_vector_2_angle_", (DL_FUNC) &_raylibr_vector_2_angle_, 2},
    {"_raylibr_vector_2_move_towards_", (DL_FUNC) &_raylibr_vector_2_move_towards_, 3},
    {"_raylibr_vector_2_distance_", (DL_FUNC) &_raylibr_vector_2_distance_, 2},
    {"_raylibr_vector_2_rotate_", (DL_FUNC) &_raylibr_vector_2_rotate_, 2},
    {"_raylibr_glyph_info_", (DL_FUNC) &_raylibr_glyph_info_, 5},
    {"_raylibr_glyph_info_get_value_", (DL_FUNC) &_raylibr_glyph_info_get_value_, 1},
    {"_raylibr_glyph_info_set_value_", (DL_FUNC) &_raylibr_glyph_info_set_value_, 2},
    {"_raylibr_glyph_info_get_offset_x_", (DL_FUNC) &_raylibr_glyph_info_get_offset_x_, 1},
    {"_raylibr_glyph_info_set_offset_x_", (DL_FUNC) &_raylibr_glyph_info_set_offset_x_, 2},
    {"_raylibr_glyph_info_get_offset_y_", (DL_FUNC) &_raylibr_glyph_info_get_offset_y_, 1},
    {"_raylibr_glyph_info_set_offset_y_", (DL_FUNC) &_raylibr_glyph_info_set_offset_y_, 2},
    {"_raylibr_glyph_info_get_advance_x_", (DL_FUNC) &_raylibr_glyph_info_get_advance_x_, 1},
    {"_raylibr_glyph_info_set_advance_x_", (DL_FUNC) &_raylibr_glyph_info_set_advance_x_, 2},
    {"_raylibr_glyph_info_get_image_", (DL_FUNC) &_raylibr_glyph_info_get_image_, 1},
    {"_raylibr_glyph_info_set_image_", (DL_FUNC) &_raylibr_glyph_info_set_image_, 2},
    {"_raylibr_material_map_", (DL_FUNC) &_raylibr_material_map_, 3},
    {"_raylibr_material_map_get_texture_", (DL_FUNC) &_raylibr_material_map_get_texture_, 1},
    {"_raylibr_material_map_set_texture_", (DL_FUNC) &_raylibr_material_map_set_texture_, 2},
    {"_raylibr_material_map_get_color_", (DL_FUNC) &_raylibr_material_map_get_color_, 1},
    {"_raylibr_material_map_set_color_", (DL_FUNC) &_raylibr_material_map_set_color_, 2},
    {"_raylibr_material_map_get_value_", (DL_FUNC) &_raylibr_material_map_get_value_, 1},
    {"_raylibr_material_map_set_value_", (DL_FUNC) &_raylibr_material_map_set_value_, 2},
    {"_raylibr_npatch_info_", (DL_FUNC) &_raylibr_npatch_info_, 6},
    {"_raylibr_npatch_info_get_source_", (DL_FUNC) &_raylibr_npatch_info_get_source_, 1},
    {"_raylibr_npatch_info_set_source_", (DL_FUNC) &_raylibr_npatch_info_set_source_, 2},
    {"_raylibr_npatch_info_get_left_", (DL_FUNC) &_raylibr_npatch_info_get_left_, 1},
    {"_raylibr_npatch_info_set_left_", (DL_FUNC) &_raylibr_npatch_info_set_left_, 2},
    {"_raylibr_npatch_info_get_top_", (DL_FUNC) &_raylibr_npatch_info_get_top_, 1},
    {"_raylibr_npatch_info_set_top_", (DL_FUNC) &_raylibr_npatch_info_set_top_, 2},
    {"_raylibr_npatch_info_get_right_", (DL_FUNC) &_raylibr_npatch_info_get_right_, 1},
    {"_raylibr_npatch_info_set_right_", (DL_FUNC) &_raylibr_npatch_info_set_right_, 2},
    {"_raylibr_npatch_info_get_bottom_", (DL_FUNC) &_raylibr_npatch_info_get_bottom_, 1},
    {"_raylibr_npatch_info_set_bottom_", (DL_FUNC) &_raylibr_npatch_info_set_bottom_, 2},
    {"_raylibr_npatch_info_get_layout_", (DL_FUNC) &_raylibr_npatch_info_get_layout_, 1},
    {"_raylibr_npatch_info_set_layout_", (DL_FUNC) &_raylibr_npatch_info_set_layout_, 2},
    {"_raylibr_ray_collision_", (DL_FUNC) &_raylibr_ray_collision_, 4},
    {"_raylibr_ray_collision_get_hit_", (DL_FUNC) &_raylibr_ray_collision_get_hit_, 1},
    {"_raylibr_ray_collision_set_hit_", (DL_FUNC) &_raylibr_ray_collision_set_hit_, 2},
    {"_raylibr_ray_collision_get_distance_", (DL_FUNC) &_raylibr_ray_collision_get_distance_, 1},
    {"_raylibr_ray_collision_set_distance_", (DL_FUNC) &_raylibr_ray_collision_set_distance_, 2},
    {"_raylibr_ray_collision_get_point_", (DL_FUNC) &_raylibr_ray_collision_get_point_, 1},
    {"_raylibr_ray_collision_set_point_", (DL_FUNC) &_raylibr_ray_collision_set_point_, 2},
    {"_raylibr_ray_collision_get_normal_", (DL_FUNC) &_raylibr_ray_collision_get_normal_, 1},
    {"_raylibr_ray_collision_set_normal_", (DL_FUNC) &_raylibr_ray_collision_set_normal_, 2},
    {"_raylibr_rectangle_", (DL_FUNC) &_raylibr_rectangle_, 4},
    {"_raylibr_rectangle_get_x_", (DL_FUNC) &_raylibr_rectangle_get_x_, 1},
    {"_raylibr_rectangle_set_x_", (DL_FUNC) &_raylibr_rectangle_set_x_, 2},
    {"_raylibr_rectangle_get_y_", (DL_FUNC) &_raylibr_rectangle_get_y_, 1},
    {"_raylibr_rectangle_set_y_", (DL_FUNC) &_raylibr_rectangle_set_y_, 2},
    {"_raylibr_rectangle_get_width_", (DL_FUNC) &_raylibr_rectangle_get_width_, 1},
    {"_raylibr_rectangle_set_width_", (DL_FUNC) &_raylibr_rectangle_set_width_, 2},
    {"_raylibr_rectangle_get_height_", (DL_FUNC) &_raylibr_rectangle_get_height_, 1},
    {"_raylibr_rectangle_set_height_", (DL_FUNC) &_raylibr_rectangle_set_height_, 2},
    {"_raylibr_render_texture_", (DL_FUNC) &_raylibr_render_texture_, 3},
    {"_raylibr_render_texture_get_id_", (DL_FUNC) &_raylibr_render_texture_get_id_, 1},
    {"_raylibr_render_texture_set_id_", (DL_FUNC) &_raylibr_render_texture_set_id_, 2},
    {"_raylibr_render_texture_get_texture_", (DL_FUNC) &_raylibr_render_texture_get_texture_, 1},
    {"_raylibr_render_texture_set_texture_", (DL_FUNC) &_raylibr_render_texture_set_texture_, 2},
    {"_raylibr_render_texture_get_depth_", (DL_FUNC) &_raylibr_render_texture_get_depth_, 1},
    {"_raylibr_render_texture_set_depth_", (DL_FUNC) &_raylibr_render_texture_set_depth_, 2},
    {"_raylibr_sound_", (DL_FUNC) &_raylibr_sound_, 2},
    {"_raylibr_sound_get_stream_", (DL_FUNC) &_raylibr_sound_get_stream_, 1},
    {"_raylibr_sound_set_stream_", (DL_FUNC) &_raylibr_sound_set_stream_, 2},
    {"_raylibr_sound_get_frame_count_", (DL_FUNC) &_raylibr_sound_get_frame_count_, 1},
    {"_raylibr_sound_set_frame_count_", (DL_FUNC) &_raylibr_sound_set_frame_count_, 2},
    {"_raylibr_texture_", (DL_FUNC) &_raylibr_texture_, 5},
    {"_raylibr_texture_get_id_", (DL_FUNC) &_raylibr_texture_get_id_, 1},
    {"_raylibr_texture_set_id_", (DL_FUNC) &_raylibr_texture_set_id_, 2},
    {"_raylibr_texture_get_width_", (DL_FUNC) &_raylibr_texture_get_width_, 1},
    {"_raylibr_texture_set_width_", (DL_FUNC) &_raylibr_texture_set_width_, 2},
    {"_raylibr_texture_get_height_", (DL_FUNC) &_raylibr_texture_get_height_, 1},
    {"_raylibr_texture_set_height_", (DL_FUNC) &_raylibr_texture_set_height_, 2},
    {"_raylibr_texture_get_mipmaps_", (DL_FUNC) &_raylibr_texture_get_mipmaps_, 1},
    {"_raylibr_texture_set_mipmaps_", (DL_FUNC) &_raylibr_texture_set_mipmaps_, 2},
    {"_raylibr_texture_get_format_", (DL_FUNC) &_raylibr_texture_get_format_, 1},
    {"_raylibr_texture_set_format_", (DL_FUNC) &_raylibr_texture_set_format_, 2},
    {"_raylibr_transform_", (DL_FUNC) &_raylibr_transform_, 3},
    {"_raylibr_transform_get_translation_", (DL_FUNC) &_raylibr_transform_get_translation_, 1},
    {"_raylibr_transform_set_translation_", (DL_FUNC) &_raylibr_transform_set_translation_, 2},
    {"_raylibr_transform_get_rotation_", (DL_FUNC) &_raylibr_transform_get_rotation_, 1},
    {"_raylibr_transform_set_rotation_", (DL_FUNC) &_raylibr_transform_set_rotation_, 2},
    {"_raylibr_transform_get_scale_", (DL_FUNC) &_raylibr_transform_get_scale_, 1},
    {"_raylibr_transform_set_scale_", (DL_FUNC) &_raylibr_transform_set_scale_, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_raylibr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
